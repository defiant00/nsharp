use NSharp.Core

ns NSharp.Language.Min.TokenTree

; Node
;   Block - lines and blocks
;       File
;       IndentBlock
;   Line - tokens
;   Token
;       Group - tokens
;           BracketGroup
;           CurlyGroup
;           ParenthesisGroup
;           StringGroup

public abstract class Node
    public fn Position Position
    public fn Parent ?Node

    public fn new(position Position, parent ?Node)
        Position = position
        Parent = parent

    ; todo - update with generics once generic constraints are added

    public fn FirstBlock ?Block
        var current = this
        for current != null and !(current is Block)
            current = current.Parent
        ret current as ?Block
    
    public fn FirstBracketGroup ?BracketGroup
        var current = this
        for current != null and !(current is BracketGroup)
            current = current.Parent
        ret current as ?BracketGroup
    
    public fn FirstCurlyGroup ?CurlyGroup
        var current = this
        for current != null and !(current is CurlyGroup)
            current = current.Parent
        ret current as ?CurlyGroup
    
    public fn FirstParenthesisGroup ?ParenthesisGroup
        var current = this
        for current != null and !(current is ParenthesisGroup)
            current = current.Parent
        ret current as ?ParenthesisGroup

    public fn FirstStringGroup ?StringGroup
        var current = this
        for current != null and !(current is StringGroup)
            current = current.Parent
        ret current as ?StringGroup
    
    public fn AdvanceParent()
        if Parent is Block block
            block.Advance()
        else
            throw new Exception("parent isn't block")

    protected fn PrintIndent(indent int)
        for i = 0, i < indent, i += 1
            Console.Write("| ")
    
    public open fn Name str is "node"

    public open fn Print(indent int)
        PrintIndent(indent)
        Console.WriteLine(Name)
