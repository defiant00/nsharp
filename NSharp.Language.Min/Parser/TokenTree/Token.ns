use NSharp.Core
use NSharp.Core.SyntaxTree

ns NSharp.Language.Min.TokenTree

public open class Token
    public static fn MISSING_TOKEN Token = new Token(default, TokenType.Missing)

    public fn Parent ?Group
    public fn Position Position
    public fn Type TokenType
    public fn Value str

    public fn new(position Position, type TokenType)
        Position = position
        Type = type
        Value = str.Empty

    public fn new(position Position, type TokenType, value str)
        Position = position
        Type = type
        Value = value

    public fn Precedence() int : Type.ToBinaryOperator().Precedence()

    public fn ToArgumentModifierToken() ArgumentModifierToken : new ArgumentModifierToken(Position, Type.ToArgumentModifier())
    public fn ToAssignmentOperatorToken() AssignmentOperatorToken : new AssignmentOperatorToken(Position, Type.ToAssignmentOperator())
    public fn ToBinaryOperatorToken() BinaryOperatorToken : new BinaryOperatorToken(Position, Type.ToBinaryOperator())
    public fn ToIdentifierToken() IdentifierToken : new IdentifierToken(Position, Value)
    public fn ToParameterModifierToken() ParameterModifierToken : new ParameterModifierToken(Position, Type.ToParameterModifier())
    public fn ToUnaryOperatorToken() UnaryOperatorToken : new UnaryOperatorToken(Position, Type.ToUnaryOperator())

    public fn IsBlock() bool : Type.IsBlock()
    public fn IsGroup() bool : Type.IsGroup()

    public open over fn ToString() str : "{Type} {Position} '{Value}'"

    protected fn PrintIndent(indent int)
        for i = 0, i < indent
            Console.Write("| ")
            i += 1

    public open fn Print(indent int)
        PrintIndent(indent)
        Console.WriteLine(this)

    public fn FirstBlock ?Group
        var current = this
        for current != null and !current.IsBlock()
            current = current.Parent
        return current as ?Group
    
    public fn FirstGroup(tokenType TokenType) ?Group
        var current = this
        for current != null and current.Type != tokenType
            current = current.Parent
        return current as ?Group
    
    public fn AdvanceParent()
        if Parent != null and Parent.IsBlock()
            Parent.Advance()
        else
            throw new Exception("parent isn't block")
    
    public fn CurrentParentToken Token : Parent != null ? Parent.Peek : MISSING_TOKEN
