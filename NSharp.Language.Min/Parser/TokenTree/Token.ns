use NSharp.Core
use NSharp.Core.SyntaxTree

ns NSharp.Language.Min.TokenTree

public open class Token
    public
        static fn MISSING_TOKEN Token = new Token(default, TokenType.Missing)

        fn Parent ?Group
        fn Position Position
        fn Type TokenType
        fn Value str

        fn new(position Position, type TokenType)
            Position = position
            Type = type
            Value = str.Empty

        fn new(position Position, type TokenType, value str)
            Position = position
            Type = type
            Value = value

        fn Precedence() int : Type.ToBinaryOperator().Precedence()

        fn ToArgumentModifierToken() ArgumentModifierToken : new ArgumentModifierToken(Position, Type.ToArgumentModifier())
        fn ToAssignmentOperatorToken() AssignmentOperatorToken : new AssignmentOperatorToken(Position, Type.ToAssignmentOperator())
        fn ToBinaryOperatorToken() BinaryOperatorToken : new BinaryOperatorToken(Position, Type.ToBinaryOperator())
        fn ToIdentifierToken() IdentifierToken : new IdentifierToken(Position, Value)
        fn ToParameterModifierToken() ParameterModifierToken : new ParameterModifierToken(Position, Type.ToParameterModifier())
        fn ToUnaryOperatorToken() UnaryOperatorToken : new UnaryOperatorToken(Position, Type.ToUnaryOperator())

        fn IsBlock() bool : Type.IsBlock()
        fn IsGroup() bool : Type.IsGroup()

        open fn Print(indent int)
            PrintIndent(indent)
            Console.WriteLine(this)

        fn FirstBlock ?Group
            var current = this
            for current != null and !current.IsBlock() : current = current.Parent
            return current as ?Group
        
        fn FirstGroup(tokenType TokenType) ?Group
            var current = this
            for current != null and current.Type != tokenType : current = current.Parent
            return current as ?Group
        
        fn AdvanceParent()
            if Parent != null and Parent.IsBlock() : Parent.Advance()
            else : throw new Exception("parent isn't block")
        
        fn CurrentParentToken Token : Parent != null ? Parent.Peek : MISSING_TOKEN

        open over fn ToString() str : "{Type} {Position} '{Value}'"

    protected fn PrintIndent(indent int)
        for i = 0, i < indent
            Console.Write("| ")
            i += 1
