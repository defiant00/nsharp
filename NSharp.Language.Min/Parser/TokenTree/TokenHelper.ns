use NSharp.Core

ns NSharp.Language.Min.TokenTree

public static class TokenHelper
    public static ext{TokenType} fn IsAssignment() bool is this > TokenType.Assignment_Start and this < TokenType.Assignment_End
    public static ext{TokenType} fn IsOperatorCanThrow() bool is this > TokenType.Operator_Can_Throw_Start and this < TokenType.Operator_Can_Throw_End
    public static ext{TokenType} fn IsLineContinuationPostfix() bool is this > TokenType.Line_Continuation_Postfix_Start and this < TokenType.Line_Continuation_Postfix_End
    public static ext{TokenType} fn IsLineContinuationPrefix() bool is this > TokenType.Line_Continuation_Prefix_Start and this < TokenType.Line_Continuation_Prefix_End
    public static ext{TokenType} fn IsArgumentModifier() bool is this > TokenType.Argument_Modifier_Start and this < TokenType.Argument_Modifier_End
    public static ext{TokenType} fn IsParameterModifier() bool is this > TokenType.Parameter_Modifier_Start and this < TokenType.Parameter_Modifier_End
    public static ext{TokenType} fn IsModifier() bool is this > TokenType.Modifier_Start and this < TokenType.Modifier_End
    public static ext{TokenType} fn IsType() bool is this > TokenType.Type_Start and this < TokenType.Type_End
    public static ext{TokenType} fn NeedsDedent() bool is this > TokenType.Token_Needs_Dedent_Start and this < TokenType.Token_Needs_Dedent_End
    public static ext{TokenType} fn IsUnaryOperator() bool is this > TokenType.Unary_Operator_Start and this < TokenType.Unary_Operator_End

    public static ext{TokenType} fn ToModifier() ModifierType is this ?
        {
            TokenType.Public is ModifierType.Public,
            TokenType.Protected is ModifierType.Protected,
            TokenType.Internal is ModifierType.Internal,
            TokenType.Private is ModifierType.Private,
            TokenType.Extension is ModifierType.Extension,
            TokenType.Abstract is ModifierType.Abstract,
            TokenType.Open is ModifierType.Open,
            TokenType.Override is ModifierType.Override,
            TokenType.Static is ModifierType.Static,
            _ is throw new Exception(Resources.FormatFatal(0x0000, this)),
        }

    public static ext{TokenType} fn ToArgumentModifier() ArgumentModifierType is this ?
        {
            TokenType.Out is ArgumentModifierType.Out,
            TokenType.Reference is ArgumentModifierType.Reference,
            _ is throw new Exception(Resources.FormatFatal(0x0001, this)),
        }
    
    public static ext{TokenType} fn ToParameterModifier() ParameterModifierType is this ?
        {
            TokenType.Out is ParameterModifierType.Out,
            TokenType.Reference is ParameterModifierType.Reference,
            TokenType.Variable is ParameterModifierType.Parameters,
            _ is throw new Exception(Resources.FormatFatal(0x0002, this)),
        }

    public static ext{TokenType} fn ToUnaryOperator() UnaryOperatorType is this ?
        {
            TokenType.Subtract is UnaryOperatorType.Negate,
            TokenType.Not is UnaryOperatorType.Not,
            TokenType.BitwiseNot is UnaryOperatorType.BitwiseNot,
            _ is throw new Exception(Resources.FormatFatal(0x0003, this)),
        }

    public static ext{TokenType} fn ToBinaryOperator() BinaryOperatorType is this ?
        {
            TokenType.Dot is BinaryOperatorType.Dot,
            TokenType.NullDot is BinaryOperatorType.NullDot,

            TokenType.Is is BinaryOperatorType.Is,
            TokenType.As is BinaryOperatorType.As,

            TokenType.Multiply is BinaryOperatorType.Multiply,
            TokenType.Divide is BinaryOperatorType.Divide,
            TokenType.Modulus is BinaryOperatorType.Modulus,

            TokenType.Add is BinaryOperatorType.Add,
            TokenType.Subtract is BinaryOperatorType.Subtract,

            TokenType.LeftShift is BinaryOperatorType.LeftShift,
            TokenType.RightShift is BinaryOperatorType.RightShift,

            TokenType.BitwiseAnd is BinaryOperatorType.BitwiseAnd,

            TokenType.BitwiseOr is BinaryOperatorType.BitwiseOr,
            TokenType.BitwiseXor is BinaryOperatorType.BitwiseXor,

            TokenType.LessThan is BinaryOperatorType.LessThan,
            TokenType.GreaterThan is BinaryOperatorType.GreaterThan,
            TokenType.LessThanOrEqual is BinaryOperatorType.LessThanOrEqual,
            TokenType.GreaterThanOrEqual is BinaryOperatorType.GreaterThanOrEqual,

            TokenType.Equal is BinaryOperatorType.Equal,
            TokenType.NotEqual is BinaryOperatorType.NotEqual,

            TokenType.And is BinaryOperatorType.And,

            TokenType.Or is BinaryOperatorType.Or,

            TokenType.NullCoalesce is BinaryOperatorType.NullCoalesce,

            _ is BinaryOperatorType.None,
        }

    public static ext{Token} fn Precedence() int is this.Type.ToBinaryOperator().Precedence()

    public static ext{TokenType} fn ToAssignmentOperator() AssignmentOperatorType is this ?
        {
            TokenType.Assign is AssignmentOperatorType.Assign,
            TokenType.AddAssign is AssignmentOperatorType.Add,
            TokenType.SubtractAssign is AssignmentOperatorType.Subtract,
            TokenType.MultiplyAssign is AssignmentOperatorType.Multiply,
            TokenType.DivideAssign is AssignmentOperatorType.Divide,
            TokenType.ModulusAssign is AssignmentOperatorType.Modulus,
            TokenType.BitwiseAndAssign is AssignmentOperatorType.BitwiseAnd,
            TokenType.BitwiseOrAssign is AssignmentOperatorType.BitwiseOr,
            TokenType.BitwiseXorAssign is AssignmentOperatorType.BitwiseXor,
            TokenType.LeftShiftAssign is AssignmentOperatorType.LeftShift,
            TokenType.RightShiftAssign is AssignmentOperatorType.RightShift,
            TokenType.NullCoalesceAssign is AssignmentOperatorType.NullCoalesce,
            _ is throw new Exception(Resources.FormatFatal(0x0004, this)),
        }

    public static var KeywordTokens Dictionary{str, TokenType}

    static fn new()
        KeywordTokens = new()
        KeywordTokens.Add
            ("ns", TokenType.Namespace)
            ("use", TokenType.Use)
            ("if", TokenType.If)
            ("else", TokenType.Else)
            ("_", TokenType.Discard)
            ("public", TokenType.Public)
            ("protected", TokenType.Protected)
            ("internal", TokenType.Internal)
            ("private", TokenType.Private)
            ("abstract", TokenType.Abstract)
            ("ext", TokenType.Extension)
            ("open", TokenType.Open)
            ("over", TokenType.Override)
            ("static", TokenType.Static)
            ("out", TokenType.Out)
            ("ref", TokenType.Reference)
            ("this", TokenType.This)
            ("str", TokenType.String)
            ("char", TokenType.Character)
            ("bool", TokenType.Boolean)
            ("i8", TokenType.I8)
            ("i16", TokenType.I16)
            ("short", TokenType.I16)
            ("i32", TokenType.I32)
            ("int", TokenType.I32)
            ("i64", TokenType.I64)
            ("long", TokenType.I64)
            ("u8", TokenType.U8)
            ("byte", TokenType.U8)
            ("u16", TokenType.U16)
            ("ushort", TokenType.U16)
            ("u32", TokenType.U32)
            ("uint", TokenType.U32)
            ("u64", TokenType.U64)
            ("ulong", TokenType.U64)
            ("f32", TokenType.F32)
            ("float", TokenType.F32)
            ("f64", TokenType.F64)
            ("double", TokenType.F64)
            ("decimal", TokenType.Decimal)
            ("class", TokenType.Class)
            ("struct", TokenType.Struct)
            ("enum", TokenType.Enum)
            ("interface", TokenType.Interface)
            ("fn", TokenType.Function)
            (Constant.FUNCTION_END, TokenType.FunctionEnd)
            ("del", TokenType.Delegate)
            ("var", TokenType.Variable)
            ("val", TokenType.Value)
            ("get", TokenType.Get)
            ("set", TokenType.Set)
            ("is", TokenType.Is)
            ("as", TokenType.As)
            ("has", TokenType.Has)
            ("new", TokenType.New)
            ("base", TokenType.Base)
            ("ret", TokenType.Return)
            ("try", TokenType.Try)
            ("catch", TokenType.Catch)
            ("fin", TokenType.Finally)
            ("throw", TokenType.Throw)
            ("for", TokenType.For)
            ("in", TokenType.In)
            ("break", TokenType.Break)
            ("continue", TokenType.Continue)
            ("true", TokenType.True)
            ("false", TokenType.False)
            ("null", TokenType.Null)
            ("default", TokenType.Default)
            ("and", TokenType.And)
            ("or", TokenType.Or)
