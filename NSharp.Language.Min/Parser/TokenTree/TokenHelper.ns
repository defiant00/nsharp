use NSharp.Core
use NSharp.Core.SyntaxTree

ns NSharp.Language.Min.TokenTree

public static class TokenHelper
    public static ext{TokenType} fn IsAssignment() bool : this > TokenType.Assignment_Start and this < TokenType.Assignment_End
    public static ext{TokenType} fn IsOperatorCanThrow() bool : this > TokenType.Operator_Can_Throw_Start and this < TokenType.Operator_Can_Throw_End
    public static ext{TokenType} fn IsLineContinuationPostfix() bool : this > TokenType.Line_Continuation_Postfix_Start and this < TokenType.Line_Continuation_Postfix_End
    public static ext{TokenType} fn IsLineContinuationPrefix() bool : this > TokenType.Line_Continuation_Prefix_Start and this < TokenType.Line_Continuation_Prefix_End
    public static ext{TokenType} fn IsArgumentModifier() bool : this > TokenType.Argument_Modifier_Start and this < TokenType.Argument_Modifier_End
    public static ext{TokenType} fn IsParameterModifier() bool : this > TokenType.Parameter_Modifier_Start and this < TokenType.Parameter_Modifier_End
    public static ext{TokenType} fn IsType() bool : this > TokenType.Type_Start and this < TokenType.Type_End
    public static ext{TokenType} fn IsBlock() bool : this > TokenType.Block_Start and this < TokenType.Block_End
    public static ext{TokenType} fn IsGroup() bool : this > TokenType.Group_Start and this < TokenType.Group_End
    public static ext{TokenType} fn NeedsDedent() bool : this > TokenType.Token_Needs_Dedent_Start and this < TokenType.Token_Needs_Dedent_End
    public static ext{TokenType} fn IsUnaryOperator() bool : this > TokenType.Unary_Operator_Start and this < TokenType.Unary_Operator_End

    public static ext{TokenType} fn ToArgumentModifier() ArgumentModifierType : this ?
        {
            TokenType.Out : ArgumentModifierType.Out,
            TokenType.Reference : ArgumentModifierType.Reference,
            _ : throw new Exception(Resources.FormatFatal(0x0001, this)),
        }
    
    public static ext{TokenType} fn ToParameterModifier() ParameterModifierType : this ?
        {
            TokenType.Out : ParameterModifierType.Out,
            TokenType.Reference : ParameterModifierType.Reference,
            TokenType.Variable : ParameterModifierType.Parameters,
            _ : throw new Exception(Resources.FormatFatal(0x0002, this)),
        }

    public static ext{TokenType} fn ToUnaryOperator() UnaryOperatorType : this ?
        {
            TokenType.Subtract : UnaryOperatorType.Negate,
            TokenType.Not : UnaryOperatorType.Not,
            TokenType.BitwiseNot : UnaryOperatorType.BitwiseNot,
            _ : throw new Exception(Resources.FormatFatal(0x0003, this)),
        }

    public static ext{TokenType} fn ToBinaryOperator() BinaryOperatorType : this ?
        {
            TokenType.Dot : BinaryOperatorType.Dot,
            TokenType.NullDot : BinaryOperatorType.NullDot,

            TokenType.Is : BinaryOperatorType.Is,
            TokenType.As : BinaryOperatorType.As,

            TokenType.Multiply : BinaryOperatorType.Multiply,
            TokenType.Divide : BinaryOperatorType.Divide,
            TokenType.Modulus : BinaryOperatorType.Modulus,

            TokenType.Add : BinaryOperatorType.Add,
            TokenType.Subtract : BinaryOperatorType.Subtract,

            TokenType.LeftShift : BinaryOperatorType.LeftShift,
            TokenType.RightShift : BinaryOperatorType.RightShift,

            TokenType.BitwiseAnd : BinaryOperatorType.BitwiseAnd,

            TokenType.BitwiseOr : BinaryOperatorType.BitwiseOr,
            TokenType.BitwiseXor : BinaryOperatorType.BitwiseXor,

            TokenType.LessThan : BinaryOperatorType.LessThan,
            TokenType.GreaterThan : BinaryOperatorType.GreaterThan,
            TokenType.LessThanOrEqual : BinaryOperatorType.LessThanOrEqual,
            TokenType.GreaterThanOrEqual : BinaryOperatorType.GreaterThanOrEqual,

            TokenType.Equal : BinaryOperatorType.Equal,
            TokenType.NotEqual : BinaryOperatorType.NotEqual,

            TokenType.And : BinaryOperatorType.And,

            TokenType.Or : BinaryOperatorType.Or,

            TokenType.NullCoalesce : BinaryOperatorType.NullCoalesce,

            _ : BinaryOperatorType.None,
        }

    public static ext{TokenType} fn ToAssignmentOperator() AssignmentOperatorType : this ?
        {
            TokenType.Assign : AssignmentOperatorType.Assign,
            TokenType.AddAssign : AssignmentOperatorType.Add,
            TokenType.SubtractAssign : AssignmentOperatorType.Subtract,
            TokenType.MultiplyAssign : AssignmentOperatorType.Multiply,
            TokenType.DivideAssign : AssignmentOperatorType.Divide,
            TokenType.ModulusAssign : AssignmentOperatorType.Modulus,
            TokenType.BitwiseAndAssign : AssignmentOperatorType.BitwiseAnd,
            TokenType.BitwiseOrAssign : AssignmentOperatorType.BitwiseOr,
            TokenType.BitwiseXorAssign : AssignmentOperatorType.BitwiseXor,
            TokenType.LeftShiftAssign : AssignmentOperatorType.LeftShift,
            TokenType.RightShiftAssign : AssignmentOperatorType.RightShift,
            TokenType.NullCoalesceAssign : AssignmentOperatorType.NullCoalesce,
            _ : throw new Exception(Resources.FormatFatal(0x0004, this)),
        }

    public static var KeywordTokens Dictionary{str, TokenType}

    static fn new()
        KeywordTokens = new()
        KeywordTokens.Add("ns", TokenType.Namespace)
        KeywordTokens.Add("use", TokenType.Use)
        KeywordTokens.Add("if", TokenType.If)
        KeywordTokens.Add("else", TokenType.Else)
        KeywordTokens.Add("_", TokenType.Discard)
        KeywordTokens.Add("out", TokenType.Out)
        KeywordTokens.Add("ref", TokenType.Reference)
        KeywordTokens.Add("this", TokenType.This)
        KeywordTokens.Add("str", TokenType.String)
        KeywordTokens.Add("char", TokenType.Character)
        KeywordTokens.Add("bool", TokenType.Boolean)
        KeywordTokens.Add("i8", TokenType.I8)
        KeywordTokens.Add("i16", TokenType.I16)
        KeywordTokens.Add("short", TokenType.I16)
        KeywordTokens.Add("i32", TokenType.I32)
        KeywordTokens.Add("int", TokenType.I32)
        KeywordTokens.Add("i64", TokenType.I64)
        KeywordTokens.Add("long", TokenType.I64)
        KeywordTokens.Add("u8", TokenType.U8)
        KeywordTokens.Add("byte", TokenType.U8)
        KeywordTokens.Add("u16", TokenType.U16)
        KeywordTokens.Add("ushort", TokenType.U16)
        KeywordTokens.Add("u32", TokenType.U32)
        KeywordTokens.Add("uint", TokenType.U32)
        KeywordTokens.Add("u64", TokenType.U64)
        KeywordTokens.Add("ulong", TokenType.U64)
        KeywordTokens.Add("f32", TokenType.F32)
        KeywordTokens.Add("float", TokenType.F32)
        KeywordTokens.Add("f64", TokenType.F64)
        KeywordTokens.Add("double", TokenType.F64)
        KeywordTokens.Add("f128", TokenType.F128)
        KeywordTokens.Add("decimal", TokenType.F128)
        KeywordTokens.Add("class", TokenType.Class)
        KeywordTokens.Add("struct", TokenType.Struct)
        KeywordTokens.Add("enum", TokenType.Enum)
        KeywordTokens.Add("interface", TokenType.Interface)
        KeywordTokens.Add("sig", TokenType.Signature)
        KeywordTokens.Add("fn", TokenType.Function)
        KeywordTokens.Add("del", TokenType.Delegate)
        KeywordTokens.Add("var", TokenType.Variable)
        KeywordTokens.Add("val", TokenType.Value)
        KeywordTokens.Add("get", TokenType.Get)
        KeywordTokens.Add("set", TokenType.Set)
        KeywordTokens.Add("is", TokenType.Is)
        KeywordTokens.Add("as", TokenType.As)
        KeywordTokens.Add("has", TokenType.Has)
        KeywordTokens.Add("new", TokenType.New)
        KeywordTokens.Add("base", TokenType.Base)
        KeywordTokens.Add("return", TokenType.Return)
        KeywordTokens.Add("try", TokenType.Try)
        KeywordTokens.Add("catch", TokenType.Catch)
        KeywordTokens.Add("finally", TokenType.Finally)
        KeywordTokens.Add("throw", TokenType.Throw)
        KeywordTokens.Add("for", TokenType.For)
        KeywordTokens.Add("in", TokenType.In)
        KeywordTokens.Add("break", TokenType.Break)
        KeywordTokens.Add("continue", TokenType.Continue)
        KeywordTokens.Add("true", TokenType.True)
        KeywordTokens.Add("false", TokenType.False)
        KeywordTokens.Add("null", TokenType.Null)
        KeywordTokens.Add("default", TokenType.Default)
        KeywordTokens.Add("and", TokenType.And)
        KeywordTokens.Add("or", TokenType.Or)
