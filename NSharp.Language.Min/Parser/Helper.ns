use System.Text
use NSharp.Core

ns NSharp.Language.Min

public static class Helper
    public static ext{str} fn Unescape() str
        var sb = new StringBuilder(this)

        ; Replace doubled '{', '}', and '"'
        sb.Replace("{{{{", "{{")
            .Replace("}}}}", "}}")
            .Replace("\"\"", "\"")

        for i = 1, i < sb.Length, i += 1
            if sb[i - 1] == '\\'
                var escaped = sb[i]
                sb.Remove(i - 1, 2)
                sb.Insert(i - 1, escaped ?
                {
                    'n' is '\n',
                    'r' is '\r',
                    't' is '\t',
                    _ is escaped,
                })

        ret sb.ToString()

    public static var KeywordTokens Dictionary{str, TokenType}

    static fn new()
        KeywordTokens = new()
        KeywordTokens.Add
            ("ns", TokenType.Namespace)
            ("use", TokenType.Use)
            ("if", TokenType.If)
            ("else", TokenType.Else)
            (":", TokenType.Colon)
            ("_", TokenType.Discard)
            ("public", TokenType.Public)
            ("protected", TokenType.Protected)
            ("internal", TokenType.Internal)
            ("private", TokenType.Private)
            ("abstract", TokenType.Abstract)
            ("ext", TokenType.Extension)
            ("open", TokenType.Open)
            ("over", TokenType.Override)
            ("static", TokenType.Static)
            ("out", TokenType.Out)
            ("ref", TokenType.Reference)
            ("this", TokenType.This)
            ("str", TokenType.String)
            ("char", TokenType.Character)
            ("bool", TokenType.Boolean)
            ("i8", TokenType.I8)
            ("i16", TokenType.I16)
            ("short", TokenType.I16)
            ("i32", TokenType.I32)
            ("int", TokenType.I32)
            ("i64", TokenType.I64)
            ("long", TokenType.I64)
            ("u8", TokenType.U8)
            ("byte", TokenType.U8)
            ("u16", TokenType.U16)
            ("ushort", TokenType.U16)
            ("u32", TokenType.U32)
            ("uint", TokenType.U32)
            ("u64", TokenType.U64)
            ("ulong", TokenType.U64)
            ("f32", TokenType.F32)
            ("float", TokenType.F32)
            ("f64", TokenType.F64)
            ("double", TokenType.F64)
            ("decimal", TokenType.Decimal)
            ("class", TokenType.Class)
            ("struct", TokenType.Struct)
            ("enum", TokenType.Enum)
            ("interface", TokenType.Interface)
            ("fn", TokenType.Function)
            ("//", TokenType.FunctionEnd)
            ("del", TokenType.Delegate)
            ("var", TokenType.Variable)
            ("val", TokenType.Value)
            ("get", TokenType.Get)
            ("set", TokenType.Set)
            ("is", TokenType.Is)
            ("as", TokenType.As)
            ("has", TokenType.Has)
            ("new", TokenType.New)
            ("base", TokenType.Base)
            ("ret", TokenType.Return)
            ("try", TokenType.Try)
            ("catch", TokenType.Catch)
            ("fin", TokenType.Finally)
            ("throw", TokenType.Throw)
            ("for", TokenType.For)
            ("in", TokenType.In)
            ("break", TokenType.Break)
            ("continue", TokenType.Continue)
            ("true", TokenType.True)
            ("false", TokenType.False)
            ("null", TokenType.Null)
            ("default", TokenType.Default)
            ("==", TokenType.Equal)
            ("!=", TokenType.NotEqual)
            ("<", TokenType.LessThan)
            (">", TokenType.GreaterThan)
            ("<=", TokenType.LessThanOrEqual)
            (">=", TokenType.GreaterThanOrEqual)
            ("and", TokenType.And)
            ("or", TokenType.Or)
            ("&", TokenType.BitwiseAnd)
            ("|", TokenType.BitwiseOr)
            ("^", TokenType.BitwiseXor)
            ("<<", TokenType.LeftShift)
            (">>", TokenType.RightShift)
            (".", TokenType.Dot)
            ("..", TokenType.DoubleDot)
            ("?.", TokenType.NullDot)
            ("??", TokenType.NullCoalesce)
            (",", TokenType.Comma)
            ("?", TokenType.Question)
            ("(", TokenType.LeftParenthesis)
            (")", TokenType.RightParenthesis)
            ("[", TokenType.LeftBracket)
            ("]", TokenType.RightBracket)
            ("{{", TokenType.LeftCurly)
            ("}}", TokenType.RightCurly)
            ("=", TokenType.Assign)
            ("+=", TokenType.AddAssign)
            ("-=", TokenType.SubtractAssign)
            ("*=", TokenType.MultiplyAssign)
            ("/=", TokenType.DivideAssign)
            ("%=", TokenType.ModulusAssign)
            ("&=", TokenType.BitwiseAndAssign)
            ("|=", TokenType.BitwiseOrAssign)
            ("^=", TokenType.BitwiseXorAssign)
            ("<<=", TokenType.LeftShiftAssign)
            (">>=", TokenType.RightShiftAssign)
            ("??=", TokenType.NullCoalesceAssign)
            ("*", TokenType.Multiply)
            ("/", TokenType.Divide)
            ("%", TokenType.Modulus)
            ("+", TokenType.Add)
            ("-", TokenType.Subtract)
            ("!", TokenType.Not)
            ("~", TokenType.BitwiseNot)
