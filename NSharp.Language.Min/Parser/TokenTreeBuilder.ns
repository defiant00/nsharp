use NSharp.Core
use NSharp.Language.Min.TokenTree

ns NSharp.Language.Min

public class TokenTreeBuilder
    public fn TokenTree Group = new(default, TokenType.FileBlock, null)

    private
        fn Diagnostics List{Diagnostic}
        fn CurrentGroup Group
        fn Tokens List{Token}
        fn CurrentIndex int = 0

    public fn new(fileName str, settings Settings, diagnostics List{Diagnostic})
        Diagnostics = diagnostics
        CurrentGroup = TokenTree

        var lexer = new Lexer(fileName, settings, diagnostics)
        Tokens = lexer.Tokens

        for CurrentIndex < Tokens.Count
            Add(Tokens[CurrentIndex])
            CurrentIndex += 1

        if settings.PrintTokenTree : TokenTree.Print(0)

    private fn AddError(position Position, code str, message str) : Diagnostics.Add(new Diagnostic(Severity.Error, code, message, position))
    
    private fn Add(token Token)
        if token.Type
            is TokenType.EOL : AddEol(token.Position)
            is TokenType.Indent : AddGroup(new Group(token.Position, TokenType.IndentBlock))
            is TokenType.Dedent : FinishGroup(TokenType.IndentBlock, token.Position, "code", "unexpected dedent")
            is TokenType.LeftBracket : EnsureAddGroup(new Group(token.Position, TokenType.BracketGroup))
            is TokenType.RightBracket : FinishGroup(TokenType.BracketGroup, token.Position, "code", "unexpected ]")
            is TokenType.LeftCurly : EnsureAddGroup(new Group(token.Position, TokenType.CurlyGroup))
            is TokenType.RightCurly : FinishGroup(TokenType.CurlyGroup, token.Position, "code", "unexpected }")
            is TokenType.LeftParenthesis : EnsureAddGroup(new Group(token.Position, TokenType.ParenthesisGroup))
            is TokenType.RightParenthesis : FinishGroup(TokenType.ParenthesisGroup, token.Position, "code", "unexpected )")
            is TokenType.StringStart : EnsureAddGroup(new Group(token.Position, TokenType.StringGroup))
            is TokenType.StringEnd : FinishGroup(TokenType.StringGroup, token.Position, "code", "unexpected """)
            is TokenType.FunctionStart : EnsureAddGroup(new Group(token.Position, TokenType.FunctionBlock))
            is TokenType.FunctionEnd : FinishGroup(TokenType.FunctionBlock, token.Position, "code", "unexpected /fn")
            is _
                EnsureGroup(token.Position)
                token.Parent = CurrentGroup
                CurrentGroup.Tokens.Add(token)

    private fn AddEol(position Position)
        if CurrentGroup.IsBlock() : CurrentGroup.Tokens.Add(new Group(position, TokenType.Line, CurrentGroup))
        else if block = CurrentGroup.FirstBlock, block != null
            VerifyUpTo(block)
            CurrentGroup = block
        else : throw new Exception("block is null for eol")

    private fn EnsureAddGroup(group Group)
        EnsureGroup(group.Position)
        AddGroup(group)

    private fn AddGroup(group Group)
        group.Parent = CurrentGroup
        CurrentGroup.Tokens.Add(group)
        CurrentGroup = group
    
    private fn FinishGroup(tokenType TokenType, position Position, code str, message str)
        if group = CurrentGroup.FirstGroup(tokenType), group?.Parent != null
            VerifyUpTo(group)
            CurrentGroup = group.Parent
        else : AddError(position, code, message)

    private fn EnsureGroup(position Position)
        if CurrentGroup.IsBlock()
            var line = new Group(position, TokenType.Line, CurrentGroup)
            CurrentGroup.Tokens.Add(line)
            CurrentGroup = line

    private fn VerifyUpTo(target Group)
        var current = CurrentGroup
        for current != null and current != target
            if current.Type
                is TokenType.BracketGroup : AddError(current.Position, "code", "unclosed [")
                is TokenType.CurlyGroup : AddError(current.Position, "code", "unclosed {{")
                is TokenType.FunctionBlock : AddError(current.Position, "code", "unclosed fn")
                is TokenType.ParenthesisGroup : AddError(current.Position, "code", "unclosed (")
                is TokenType.StringGroup : AddError(current.Position, "code", "unclosed """)
            current = current.Parent
        if current != target : throw new Exception("unable to verify to {target}")
