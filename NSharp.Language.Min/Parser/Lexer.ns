use NSharp.Core
use NSharp.Language.Min.TokenTree

ns NSharp.Language.Min

public class IndentationLevel
    public fn Level int
    public fn FunctionToken ?Token

    public fn new(level int) : Level = level

public class Lexer
    public fn Tokens List{Token} = new()

    private
        val EOL char = '\0'
        val OPERATOR_CHARACTERS str = "()[]{{}}<>:?!=+-*/%,.&|^~"
        val REPEATED_ESCAPE_STRING_CHARACTERS str = "{{}}"""

        del StateFunction() ?StateFunction

        fn Line str = str.Empty
        fn LineNumber int = 0
        fn StartIndex int
        fn CurrentIndex int
        fn State ?StateFunction
        fn IndentationLevels Stack{IndentationLevel} = new()
        fn HeldIndents Queue{int} = new()
        fn HeldEols int = 0
        fn LastEmittedWasLineContinuation bool = false
        fn StringTerminators Stack{TokenType} = new()
        fn Diagnostics List{Diagnostic} = new()

    public fn new(fileName str, settings Settings, diagnostics List{Diagnostic})
        Diagnostics = diagnostics
        IndentationLevels.Push(new IndentationLevel(0))

        use reader = new StreamReader(fileName)
        for line = reader.ReadLine(), line != null
            LexLine(line)
            line = reader.ReadLine()
        EmitIndent(0)
        EmitHeld(false)

        if settings.PrintTokens
            for token in Tokens
                Console.Write(token)
                if token.Type == TokenType.EOL : Console.WriteLine()
                else : Console.Write(" | ")
            Console.WriteLine()

    private fn LexLine(line str)
        LineNumber += 1
        Line = line
        StartIndex = 0
        CurrentIndex = 0
        State = LexIndent

        for State != null : State = State()

    private fn AddError(position Position, code str, message str) : Diagnostics.Add(new Diagnostic(Severity.Error, code, message, position))

    ; Identifiers can start with a letter, _, or ` to indicate an identifier that matches a keyword
    private fn IsValidIdentifierStart(c char) bool : char.IsLetter(c) or c == '_' or c == Constant.IDENTIFIER_INDICATOR

    ; Identifiers can contain letters, numbers, and _
    private fn IsValidIdentifier(c char) bool : char.IsLetter(c) or c == '_' or char.IsDigit(c)

    private fn IsValidOperator(c char) bool : OPERATOR_CHARACTERS.IndexOf(c) >= 0

    private fn IsLineEnd(c char) bool : c == EOL or c == '\r' or c == '\n'

    private fn IsValidBinary(c char) bool : c == '0' or c == '1'

    private fn IsValidHex(c char) bool : char.IsDigit(c) or (c >= 'a' and c <= 'f') or (c >= 'A' and c <= 'F')

    private fn CurrentPosition Position : new Position() { Line = LineNumber, Column = StartIndex + 1 }

    private fn CurrentValue str : Line.Substring(StartIndex, CurrentLength)

    private fn CurrentLength int : CurrentIndex - StartIndex

    private fn Next() char
        var next = Peek()
        CurrentIndex += 1
        return next
    
    private fn Peek(offset int = 0) char : ((CurrentIndex + offset) >= Line.Length) ? EOL : Line[CurrentIndex + offset]

    private fn Backup() : CurrentIndex -= 1

    private fn Discard(offset int = 0)
        CurrentIndex += offset
        StartIndex = CurrentIndex

    private fn Accept(valid str) bool
        if valid.IndexOf(Next()) >= 0 : return true
        Backup()
        return false

    private fn EmitEol() : HeldEols += 1
    
    private fn EmitIndent(indent int) : HeldIndents.Enqueue(indent)

    private fn EmitHeld(needsDedent bool)
        ; Emit any held tokens.
        ; For normal code we emit:
        ;   [first EOL] [dedents] [remaining EOLs]
        ; If the token needs a dedent (such as an else) emit:
        ;   [first EOL] [all but the last dedent] [remaining EOLs] [last dedent]

        ; add the first EOL
        if HeldEols > 0 : Tokens.Add(new Token(CurrentPosition, TokenType.EOL, str.Empty))
        var emitFinalDedent = false
        for HeldIndents.Any()
            var indent = HeldIndents.Dequeue()
            var currentIndent = IndentationLevels.Peek().Level
            if indent > currentIndent
                Tokens.Add(new Token(CurrentPosition, TokenType.Indent, str.Empty))
                IndentationLevels.Push(new IndentationLevel(indent))
            else
                for IndentationLevels.Any() and indent < currentIndent
                    if needsDedent
                        if emitFinalDedent : Tokens.Add(new Token(CurrentPosition, TokenType.Dedent, str.Empty))
                        emitFinalDedent = true
                    else : Tokens.Add(new Token(CurrentPosition, TokenType.Dedent, str.Empty))
                    IndentationLevels.Pop()
                    currentIndent = IndentationLevels.Peek().Level
                if !IndentationLevels.Any() or currentIndent != indent
                    AddError(CurrentPosition, "code", "mismatched indentation level")
        ; add any remaining EOLs
        for i = 1, i < HeldEols
            Tokens.Add(new Token(CurrentPosition, TokenType.EOL, str.Empty))
            i += 1
        HeldEols = 0
        
        if emitFinalDedent : Tokens.Add(new Token(CurrentPosition, TokenType.Dedent, str.Empty))

    private fn MoveEmit(count int, token TokenType)
        CurrentIndex += count
        Emit(token)

    private fn Emit(tokenType TokenType)
        ; if the previous or current token is a line continuation, clear the held tokens
        if LastEmittedWasLineContinuation or tokenType.IsLineContinuationPrefix()
            HeldIndents.Clear()
            HeldEols = 0
        else : EmitHeld(tokenType.NeedsDedent())

        ; string terminators
        if tokenType == TokenType.LeftCurly : StringTerminators.Push(TokenType.RightCurly)
        else if tokenType == TokenType.StringStart : StringTerminators.Push(TokenType.StringEnd)
        else if StringTerminators.Any() and StringTerminators.Peek() == tokenType
            StringTerminators.Pop()

        ; create the token and escape the value if it's a string
        var curVal = CurrentValue
        if tokenType == TokenType.StringLiteral : curVal = curVal.Unescape()
        var token = new Token(CurrentPosition, tokenType, curVal)

        ; functions
        if tokenType == TokenType.Function : IndentationLevels.Peek().FunctionToken = token
        else if tokenType == TokenType.FunctionEnd
            if startToken = IndentationLevels.Peek().FunctionToken, startToken != null
                ; found a matching function end, so set the start as a function start
                startToken.Type = TokenType.FunctionStart
                IndentationLevels.Peek().FunctionToken = null
            else : AddError(CurrentPosition, "code", "misplaced /fn")

        ; emit the current token
        Tokens.Add(token)

        LastEmittedWasLineContinuation = tokenType.IsLineContinuationPostfix()

        StartIndex = CurrentIndex

    private fn LexIndent() ?StateFunction
        var indent = 0
        for
            if Next()
                is EOL
                is '\r'
                is '\n'
                    Backup()
                    Discard()
                    EmitEol()
                    return null
                is ' ' : indent += 1
                is '\t' : indent += 4
                is _
                    Backup()
                    Discard()
                    EmitIndent(indent)
                    return LexStatement

    private fn LexStatement() ?StateFunction
        for
            if peekVal = Peek(), peekVal
                is ' '
                is '\t' : Discard(1)
                is EOL
                is '\r'
                is '\n'
                    Discard()
                    EmitEol()
                    return null
                is ';' : return LexComment
                is '\'' : return LexCharacter
                is '"' : return LexString
                is _
                    if peekVal == '}' and StringTerminators.Any() and StringTerminators.Peek() == TokenType.RightCurly
                        return LexString
                    else if IsValidIdentifierStart(peekVal) : return LexIdentifier
                    else if char.IsDigit(peekVal) : return LexNumber
                    else if IsValidOperator(peekVal) : return LexOperator
                    else
                        AddError(CurrentPosition, "code", "Invalid character '{peekVal}'")
                        Discard(1)

    private fn LexCharacter() ?StateFunction
        ; discard the '
        Discard(1)

        if c = Next(), IsLineEnd(c)
            AddError(CurrentPosition, "code", "unclosed '")
            return LexStatement
        else if c == '\\'
            c = Next()
            if IsLineEnd(c)
                AddError(CurrentPosition, "code", "unclosed '")
                return LexStatement

        if Peek() != '\'' : AddError(CurrentPosition, "code", "unclosed '")
        else
            Emit(TokenType.CharacterLiteral)
            Discard(1)

        return LexStatement

    private fn LexComment() ?StateFunction
        ; discard the ;
        Discard(1)

        CurrentIndex = Line.Length
        Emit(TokenType.Comment)
        EmitEol()
        return null

    private fn LexIdentifier() ?StateFunction
        ; discard any leading whitespace
        Discard()

        ; accept the starting identifier character
        var isIdentifier = Next() == Constant.IDENTIFIER_INDICATOR
        ; if it starts with ` discard it
        if isIdentifier : Discard()

        for c = Peek(), IsValidIdentifier(c)
            Next()
            c = Peek()

        if CurrentLength == 0 : AddError(CurrentPosition, "code", "an identifier must have a value")
        else if isIdentifier : Emit(TokenType.Identifier)
        else
            var tokenType TokenType
            var found = TokenHelper.KeywordTokens.TryGetValue(CurrentValue, out tokenType)
            Emit(found ? tokenType : TokenType.Identifier)
        return LexStatement

    private fn LexNumber() ?StateFunction
        ; discard any leading whitespace
        Discard()

        if Peek() == '0'
            Next()
            if Peek() == 'b'
                ; binary
                Next()
                for c = Peek(), IsValidBinary(c)
                    Next()
                    c = Peek()
                Emit(TokenType.NumberLiteral)
                return LexStatement
            else if Peek() == 'x'
                ; hex
                Next()
                for c = Peek(), IsValidHex(c)
                    Next()
                    c = Peek()
                Emit(TokenType.NumberLiteral)
                return LexStatement
        for c = Peek(), char.IsDigit(c)
            Next()
            c = Peek()
        if Accept(".")
            var foundDigitsAfterDecimal = false
            for c = Peek(), char.IsDigit(c)
                Next()
                foundDigitsAfterDecimal = true
                c = Peek()
            ; Put the decimal back if there are no numbers after it
            if !foundDigitsAfterDecimal : Backup()
        Emit(TokenType.NumberLiteral)
        return LexStatement

    private fn LexOperator() ?StateFunction
        ; discard any leading whitespace
        Discard()

        if Peek()
            is '.'
                if Peek(1) == '.' : MoveEmit(2, TokenType.DoubleDot)
                else : MoveEmit(1, TokenType.Dot)
            is ',' : MoveEmit(1, TokenType.Comma)
            is '?'
                if next = Peek(1), next == '.' : MoveEmit(2, TokenType.NullDot)
                else if next == '?'
                    if Peek(2) == '=' : MoveEmit(3, TokenType.NullCoalesceAssign)
                    else : MoveEmit(2, TokenType.NullCoalesce)
                else : MoveEmit(1, TokenType.Question)
            is ':'
                if Peek(1) == ':' : MoveEmit(2, TokenType.DoubleColon)
                else : MoveEmit(1, TokenType.Colon)
            is '='
                if Peek(1) == '=' : MoveEmit(2, TokenType.Equal)
                else : MoveEmit(1, TokenType.Assign)
            is '!'
                if Peek(1) == '=' : MoveEmit(2, TokenType.NotEqual)
                else : MoveEmit(1, TokenType.Not)
            is '<'
                if next = Peek(1), next == '<'
                    if Peek(2) == '=' : MoveEmit(3, TokenType.LeftShiftAssign)
                    else : MoveEmit(2, TokenType.LeftShift)
                else if next == '=' : MoveEmit(2, TokenType.LessThanOrEqual)
                else : MoveEmit(1, TokenType.LessThan)
            is '>'
                if next = Peek(1), next == '>'
                    if Peek(2) == '=' : MoveEmit(3, TokenType.RightShiftAssign)
                    else : MoveEmit(2, TokenType.RightShift)
                else if next == '=' : MoveEmit(2, TokenType.GreaterThanOrEqual)
                else : MoveEmit(1, TokenType.GreaterThan)
            is '+'
                if Peek(1) == '=' : MoveEmit(2, TokenType.AddAssign)
                else : MoveEmit(1, TokenType.Add)
            is '-'
                if Peek(1) == '=' : MoveEmit(2, TokenType.SubtractAssign)
                else : MoveEmit(1, TokenType.Subtract)
            is '*'
                if Peek(1) == '=' : MoveEmit(2, TokenType.MultiplyAssign)
                else : MoveEmit(1, TokenType.Multiply)
            is '/'
                if next = Peek(1), next == '=' : MoveEmit(2, TokenType.DivideAssign)
                else if next == 'f' and Peek(2) == 'n' and !IsValidIdentifier(Peek(3))
                    MoveEmit(3, TokenType.FunctionEnd)
                else : MoveEmit(1, TokenType.Divide)
            is '%'
                if Peek(1) == '=' : MoveEmit(2, TokenType.ModulusAssign)
                else : MoveEmit(1, TokenType.Modulus)
            is '&'
                if Peek(1) == '=' : MoveEmit(2, TokenType.BitwiseAndAssign)
                else : MoveEmit(1, TokenType.BitwiseAnd)
            is '|'
                if Peek(1) == '=' : MoveEmit(2, TokenType.BitwiseOrAssign)
                else : MoveEmit(1, TokenType.BitwiseOr)
            is '^'
                if Peek(1) == '=' : MoveEmit(2, TokenType.BitwiseXorAssign)
                else : MoveEmit(1, TokenType.BitwiseXor)
            is '~' : MoveEmit(1, TokenType.BitwiseNot)
            is '(' : MoveEmit(1, TokenType.LeftParenthesis)
            is ')' : MoveEmit(1, TokenType.RightParenthesis)
            is '[' : MoveEmit(1, TokenType.LeftBracket)
            is ']' : MoveEmit(1, TokenType.RightBracket)
            is '{' : MoveEmit(1, TokenType.LeftCurly)
            is '}' : MoveEmit(1, TokenType.RightCurly)
            is _
                AddError(CurrentPosition, "code", "invalid operator character {Peek()}")
                Next()

        return LexStatement

    private fn LexString() ?StateFunction
        ; discard any leading whitespace
        Discard()
        
        ; accept the " or }
        if Next() == '"' : Emit(TokenType.StringStart)
        else : Emit(TokenType.RightCurly)

        for StringTerminators.Any() and StringTerminators.Peek() == TokenType.StringEnd
            ; Repeated '"', '{', '}' are accepted as literals
            if c = Peek(), REPEATED_ESCAPE_STRING_CHARACTERS.IndexOf(c) >= 0 and c == Peek(1)
                Next()
            else if c == '"'
                if CurrentLength > 0 : Emit(TokenType.StringLiteral)
                ; accept the "
                Next()
                Emit(TokenType.StringEnd)
                break
            else if c == '{'
                if CurrentLength > 0 : Emit(TokenType.StringLiteral)
                break
            else if c == '\\'
                Next()
                if IsLineEnd(Peek()) : break
            else if IsLineEnd(c) : break
            Next()

        return LexStatement
