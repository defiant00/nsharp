use System.Text
use NSharp.Core

ns NSharp.Language.Min.Compiler

public static class Helpers
    public static ext{str} fn Unescape() str
        var sb = new StringBuilder(this)

        ; Replace doubled '{', '}', and '"'
        sb.Replace("{{{{", "{{")
            .Replace("}}}}", "}}")
            .Replace("\"\"", "\"")

        for i = 1, i < sb.Length, i += 1
            if sb[i - 1] == '\\'
                var escaped = sb[i]
                sb.Remove(i - 1, 2)
                sb.Insert(i - 1, escaped ?
                {
                    'n' is '\n',
                    'r' is '\r',
                    't' is '\t',
                    _ is escaped,
                })

        ret sb.ToString()

    public static ext{StringBuilder} fn Indent(indentStr str, indent int)
        for i = 0, i < indent, i += 1
            this.Append(indentStr)

    public static ext{StringBuilder} fn AppendIndented(indentStr str, indent int, content str)
        this.Indent(indentStr, indent)
        this.Append(content)

    public static ext{StringBuilder} fn AppendLineIndented(indentStr str, indent int, content str)
        this.Indent(indentStr, indent)
        this.AppendLine(content)

    public static ext{StringBuilder} fn AppendModifiersIndented(indentStr str, indent int, modifiers List{ModifierType})
        this.Indent(indentStr, indent)
        for modifier in modifiers
            this.Append(modifier.StringVal())
            this.Append(" ")

    public static ext{str} fn GetLiteral() str is KeywordTokens.ContainsKey(this) ? "{Constants.LITERAL_INDICATOR}{this}", this

    public static ext{ModifierType} fn StringVal() str is this ?
        {
            ModifierType.Public is "public",
            ModifierType.Protected is "protected",
            ModifierType.Internal is "internal",
            ModifierType.Private is "private",
            ModifierType.Static is "static",
            ModifierType.Abstract is "abstract",
            ModifierType.Virtual is "virtual",
            ModifierType.Override is "override",

            ModifierType.Extension is "",

            _ is "[{this}]",
        }

    public static ext{BinaryOperatorType} fn StringVal() str is this ?
        {
            BinaryOperatorType.Dot is ".",
            BinaryOperatorType.NullDot is "?.",

            BinaryOperatorType.As is "as",

            BinaryOperatorType.Multiply is "*",
            BinaryOperatorType.Divide is "/",
            BinaryOperatorType.Modulus is "%",

            BinaryOperatorType.Add is "+",
            BinaryOperatorType.Subtract is "-",

            BinaryOperatorType.LeftShift is "<<",
            BinaryOperatorType.RightShift is ">>",

            BinaryOperatorType.BitwiseAnd is "&",

            BinaryOperatorType.BitwiseOr is "|",
            BinaryOperatorType.BitwiseXor is "^",

            BinaryOperatorType.LessThan is "<",
            BinaryOperatorType.GreaterThan is ">",
            BinaryOperatorType.LessThanOrEqual is "<=",
            BinaryOperatorType.GreaterThanOrEqual is ">=",

            BinaryOperatorType.Equal is "==",
            BinaryOperatorType.NotEqual is "!=",

            BinaryOperatorType.And is "and",

            BinaryOperatorType.Or is "or",

            BinaryOperatorType.NullCoalesce is "??",

            _ is "[{this}]",
        }

    public static ext{AssignmentOperatorType} fn StringVal() str is this ?
        {
            AssignmentOperatorType.Assign is "=",
            AssignmentOperatorType.Add is "+=",
            AssignmentOperatorType.Subtract is "-=",
            AssignmentOperatorType.Multiply is "*=",
            AssignmentOperatorType.Divide is "/=",
            AssignmentOperatorType.Modulus is "%=",
            AssignmentOperatorType.BitwiseAnd is "&=",
            AssignmentOperatorType.BitwiseOr is "|=",
            AssignmentOperatorType.BitwiseXor is "^=",
            AssignmentOperatorType.LeftShift is "<<=",
            AssignmentOperatorType.RightShift is ">>=",
            AssignmentOperatorType.NullCoalesce is "??=",
            _ is "[{this}]",
        }

    public static var KeywordTokens Dictionary{str, TokenType}

    static fn new()
        KeywordTokens = new()
        KeywordTokens.Add("ns", TokenType.Namespace)
        KeywordTokens.Add("use", TokenType.Use)
        KeywordTokens.Add("if", TokenType.If)
        KeywordTokens.Add("else", TokenType.Else)
        KeywordTokens.Add("_", TokenType.Discard)
        KeywordTokens.Add("public", TokenType.Public)
        KeywordTokens.Add("protected", TokenType.Protected)
        KeywordTokens.Add("internal", TokenType.Internal)
        KeywordTokens.Add("private", TokenType.Private)
        KeywordTokens.Add("static", TokenType.Static)
        KeywordTokens.Add("abstract", TokenType.Abstract)
        KeywordTokens.Add("virtual", TokenType.Virtual)
        KeywordTokens.Add("override", TokenType.Override)
        KeywordTokens.Add("ext", TokenType.Extension)
        KeywordTokens.Add("this", TokenType.This)
        KeywordTokens.Add("str", TokenType.String)
        KeywordTokens.Add("char", TokenType.Character)
        KeywordTokens.Add("bool", TokenType.Boolean)
        KeywordTokens.Add("i8", TokenType.I8)
        KeywordTokens.Add("i16", TokenType.I16)
        KeywordTokens.Add("short", TokenType.I16)
        KeywordTokens.Add("i32", TokenType.I32)
        KeywordTokens.Add("int", TokenType.I32)
        KeywordTokens.Add("i64", TokenType.I64)
        KeywordTokens.Add("long", TokenType.I64)
        KeywordTokens.Add("u8", TokenType.U8)
        KeywordTokens.Add("byte", TokenType.U8)
        KeywordTokens.Add("u16", TokenType.U16)
        KeywordTokens.Add("ushort", TokenType.U16)
        KeywordTokens.Add("u32", TokenType.U32)
        KeywordTokens.Add("uint", TokenType.U32)
        KeywordTokens.Add("u64", TokenType.U64)
        KeywordTokens.Add("ulong", TokenType.U64)
        KeywordTokens.Add("f32", TokenType.F32)
        KeywordTokens.Add("float", TokenType.F32)
        KeywordTokens.Add("f64", TokenType.F64)
        KeywordTokens.Add("double", TokenType.F64)
        KeywordTokens.Add("decimal", TokenType.Decimal)
        KeywordTokens.Add("class", TokenType.Class)
        KeywordTokens.Add("struct", TokenType.Struct)
        KeywordTokens.Add("enum", TokenType.Enum)
        KeywordTokens.Add("interface", TokenType.Interface)
        KeywordTokens.Add("fn", TokenType.Function)
        KeywordTokens.Add("del", TokenType.Delegate)
        KeywordTokens.Add("var", TokenType.Variable)
        KeywordTokens.Add("val", TokenType.Value)
        KeywordTokens.Add("get", TokenType.Get)
        KeywordTokens.Add("set", TokenType.Set)
        KeywordTokens.Add("is", TokenType.Is)
        KeywordTokens.Add("as", TokenType.As)
        KeywordTokens.Add("has", TokenType.Has)
        KeywordTokens.Add("new", TokenType.New)
        KeywordTokens.Add("base", TokenType.Base)
        KeywordTokens.Add("ret", TokenType.Return)
        KeywordTokens.Add("try", TokenType.Try)
        KeywordTokens.Add("catch", TokenType.Catch)
        KeywordTokens.Add("fin", TokenType.Finally)
        KeywordTokens.Add("throw", TokenType.Throw)
        KeywordTokens.Add("for", TokenType.For)
        KeywordTokens.Add("in", TokenType.In)
        KeywordTokens.Add("break", TokenType.Break)
        KeywordTokens.Add("continue", TokenType.Continue)
        KeywordTokens.Add("true", TokenType.True)
        KeywordTokens.Add("false", TokenType.False)
        KeywordTokens.Add("null", TokenType.Null)
        KeywordTokens.Add("==", TokenType.Equal)
        KeywordTokens.Add("!=", TokenType.NotEqual)
        KeywordTokens.Add("<", TokenType.LessThan)
        KeywordTokens.Add(">", TokenType.GreaterThan)
        KeywordTokens.Add("<=", TokenType.LessThanOrEqual)
        KeywordTokens.Add(">=", TokenType.GreaterThanOrEqual)
        KeywordTokens.Add("and", TokenType.And)
        KeywordTokens.Add("or", TokenType.Or)
        KeywordTokens.Add("&", TokenType.BitwiseAnd)
        KeywordTokens.Add("|", TokenType.BitwiseOr)
        KeywordTokens.Add("^", TokenType.BitwiseXor)
        KeywordTokens.Add("<<", TokenType.LeftShift)
        KeywordTokens.Add(">>", TokenType.RightShift)
        KeywordTokens.Add(".", TokenType.Dot)
        KeywordTokens.Add("..", TokenType.DoubleDot)
        KeywordTokens.Add("?.", TokenType.NullDot)
        KeywordTokens.Add("??", TokenType.NullCoalesce)
        KeywordTokens.Add(",", TokenType.Comma)
        KeywordTokens.Add("?", TokenType.Question)
        KeywordTokens.Add("(", TokenType.LeftParenthesis)
        KeywordTokens.Add(")", TokenType.RightParenthesis)
        KeywordTokens.Add("[", TokenType.LeftBracket)
        KeywordTokens.Add("]", TokenType.RightBracket)
        KeywordTokens.Add("{{", TokenType.LeftCurly)
        KeywordTokens.Add("}}", TokenType.RightCurly)
        KeywordTokens.Add("=", TokenType.Assign)
        KeywordTokens.Add("+=", TokenType.AddAssign)
        KeywordTokens.Add("-=", TokenType.SubtractAssign)
        KeywordTokens.Add("*=", TokenType.MultiplyAssign)
        KeywordTokens.Add("/=", TokenType.DivideAssign)
        KeywordTokens.Add("%=", TokenType.ModulusAssign)
        KeywordTokens.Add("&=", TokenType.BitwiseAndAssign)
        KeywordTokens.Add("|=", TokenType.BitwiseOrAssign)
        KeywordTokens.Add("^=", TokenType.BitwiseXorAssign)
        KeywordTokens.Add("<<=", TokenType.LeftShiftAssign)
        KeywordTokens.Add(">>=", TokenType.RightShiftAssign)
        KeywordTokens.Add("??=", TokenType.NullCoalesceAssign)
        KeywordTokens.Add("*", TokenType.Multiply)
        KeywordTokens.Add("/", TokenType.Divide)
        KeywordTokens.Add("%", TokenType.Modulus)
        KeywordTokens.Add("+", TokenType.Add)
        KeywordTokens.Add("-", TokenType.Subtract)
        KeywordTokens.Add("!", TokenType.Not)
        KeywordTokens.Add("~", TokenType.BitwiseNot)
