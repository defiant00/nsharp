ns NSharp.Core.SyntaxTree

public class SyntaxTreePrinterVisitor has ISyntaxTreeVisitor
    private fn Indent int

    private fn Write(value System.Object) : Console.Write(value)
    private fn WriteLine() : Console.WriteLine()
    private fn WriteLine(line str) : Console.WriteLine(line)

    private fn WriteIndented()
        for i = 0, i < Indent
            Write("  ")
            i += 1

    private fn WriteIndented(line str)
        WriteIndented()
        Write(line)

    private fn WriteLineIndented(line str)
        WriteIndented()
        WriteLine(line)

    private fn WriteIndentedBlock(items IEnumerable{Node})
        Indent += 1
        for item in items
            item.Accept(this)
        Indent -= 1
    
    private fn WriteGenerics(generics List{Statement})
        if generics.Any()
            Write("{{")
            JoinItems(generics)
            Write("}}")
    
    private fn JoinItems(items IEnumerable{Node}, separator str = ", ")
        var first = true
        for item in items
            if first
                first = false
            else
                Write(separator)
            item.Accept(this)

    public fn Visit(item AnonymousFunction)
        WriteLine()
        Indent += 1
        WriteIndented("Anon fn: ")
        if item.ReturnType == null
            Write("void")
        else
            item.ReturnType.Accept(this)
        Write(" (")
        JoinItems(item.Parameters)
        WriteLine(")")
        WriteIndentedBlock(item.Statements)
        Indent -= 1

    public fn Visit(item Argument)
        if item.Name != null
            item.Name.Accept(this)
            Write(" = ")
        JoinItems(item.Modifiers, " ")
        Write(" ")
        item.Value.Accept(this)
    
    public fn Visit(item ArgumentModifierToken) : Write(item.Value)
    
    public fn Visit(item Arguments)
        item.Value.Accept(this)
        Write("(")
        JoinItems(item.Values)
        Write(")")

    public fn Visit(item ArrayLiteral)
        Write("[")
        JoinItems(item.Values)
        Write("]")
    
    public fn Visit(item ArrayType)
        Write("array")
        if item.Dimension != null
            Write("_")
            item.Dimension.Accept(this)
        Write("(")
        item.Type.Accept(this)
        Write(")")

    public fn Visit(item Assignment)
        WriteIndented("Assignment: ")
        item.LeftOperand.Accept(this)
        Write(" ")
        item.Operator.Accept(this)
        Write(" ")
        item.RightOperand.Accept(this)
        WriteLine()

    public fn Visit(item AssignmentOperatorToken) : Write("{item.Value}-Assign")

    public fn Visit(item Attribute)
        if item.Qualifier != null
            item.Qualifier.Accept(this)
            Write(":")
        item.Type.Accept(this)

    public fn Visit(item AttributeBlock)
        WriteIndented("Attributes: ")
        JoinItems(item.Attributes)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item BadExpressionToken) : Write("[bad expr]")

    public fn Visit(item BadStatementToken) : WriteLineIndented("[bad stmt]")

    public fn Visit(item BaseClassToken) : Write("[base]")

    public fn Visit(item BinaryOperator)
        Write("(")
        item.LeftOperand.Accept(this)
        Write(" ")
        item.Operator.Accept(this)
        Write(" ")
        item.RightOperand.Accept(this)
        Write(")")

    public fn Visit(item BinaryOperatorToken) : Write(item.Value)

    public fn Visit(item Block)
        WriteLineIndented("Block")
        WriteIndentedBlock(item.Statements)

    public fn Visit(item BreakToken) : WriteLineIndented("Break")

    public fn Visit(item Case)
        WriteIndented("Case: ")
        item.Value.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item Catch)
        WriteIndented("Catch: ")
        item.Value?.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item CharacterToken) : Write("'{item.Value}'")

    public fn Visit(item Class)
        WriteIndented("Class: ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        if item.Base != null
            Write(" inherits ")
            item.Base.Accept(this)
        if item.Interfaces.Any()
            Write(" implements ")
            JoinItems(item.Interfaces)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item CommentToken) : WriteLineIndented("Comment{(item.IsDocumentation ? " (doc)" : "")}: {item.Value}")

    public fn Visit(item Condition)
        item.Value.Accept(this)
        Write(" => ")
        item.Result.Accept(this)

    public fn Visit(item Conditional)
        item.Value.Accept(this)
        WriteLine(" ?")
        WriteLineIndented("{{")
        Indent += 1
        for cond in item.Conditions
            WriteIndented()
            cond.Accept(this)
            WriteLine()
        Indent -= 1
        WriteLineIndented("}}")

    public fn Visit(item Constant)
        WriteIndented("Constant: ")
        item.Type.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        if item.Value != null
            Write(" = ")
            item.Value.Accept(this)
        WriteLine()

    public fn Visit(item ConstructorCall)
        Write("new ")
        item.Type?.Accept(this)
        Write("(")
        JoinItems(item.Arguments)
        Write(")")
        if item.Initializers.Any()
            Write(" {{")
            JoinItems(item.Initializers)
            Write("}}")

    public fn Visit(item ConstructorDefinition)
        WriteIndented("Constructor: .ctor(")
        JoinItems(item.Parameters)
        Write(")")
        if item.BaseArguments.Any()
            Write(" base(")
            JoinItems(item.BaseArguments)
            Write(")")
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item ContinueToken) : WriteLineIndented("Continue")

    public fn Visit(item CurrentObjectInstanceToken) : Write("[this]")

    public fn Visit(item DefaultValueToken) : Write("[default]")

    public fn Visit(item Core.SyntaxTree.Delegate)
        WriteIndented("Delegate: ")
        if item.ReturnType == null
            Write("void")
        else
            item.ReturnType.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        Write("(")
        JoinItems(item.Parameters)
        WriteLine(")")

    public fn Visit(item DiscardToken) : Write("[discard]")

    public fn Visit(item Enumeration)
        WriteIndented("Enum: ")
        item.Name.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item EnumerationItem)
        WriteIndented()
        item.Name.Accept(this)
        if item.Value != null
            Write(" = ")
            item.Value.Accept(this)
        if item.Comment != null
            var prev = Indent
            Indent = 1
            item.Comment.Accept(this)
            Indent = prev
        else
            WriteLine()

    public fn Visit(item Expression) : throw new InvalidItemException()

    public fn Visit(item ExpressionStatement)
        WriteIndented("Expr stmt: ")
        item.Value.Accept(this)
        WriteLine()

    public fn Visit(item Field)
        WriteIndented("Field: ")
        item.Type.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        if item.Value != null
            Write(" = ")
            item.Value.Accept(this)
        WriteLine()

    public fn Visit(item Core.SyntaxTree.File)
        WriteLineIndented("File: {item.Name}")
        WriteIndentedBlock(item.Statements)
    
    public fn Visit(item For)
        WriteLineIndented("For:")
        if item.Init != null
            WriteIndented("Init: ")
            item.Name?.Accept(this)
            Write(" = ")
            item.Init.Accept(this)
            WriteLine()
        if item.Condition != null
            WriteIndented("Condition: ")
            item.Condition.Accept(this)
            WriteLine()
        WriteLineIndented("Statements:")
        WriteIndentedBlock(item.Statements)

    public fn Visit(item ForEach)
        WriteIndented("ForEach ")
        item.Name.Accept(this)
        Write(" in ")
        item.Value.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Statements)
    
    public fn Visit(item Generic)
        item.Name.Accept(this)
        if item.Constraints.Any()
            Write(" ")
            JoinItems(item.Constraints, " ")

    public fn Visit(item GenericConstraintToken) : Write(item.Value)

    public fn Visit(item IdentifierToken) : Write(item.Value)

    public fn Visit(item If)
        WriteIndented("If ")
        if item.LocalName != null and item.LocalValue != null
            item.LocalName.Accept(this)
            Write(" = ")
            item.LocalValue.Accept(this)
            Write(", ")
        item.Condition.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Statements)
        if item.ElseStatements.Any()
            WriteLineIndented("Else")
            WriteIndentedBlock(item.ElseStatements)

    public fn Visit(item ImportToken) : WriteLineIndented("Import: {str.Join(".", item.NameParts)}")

    public fn Visit(item Initializer)
        item.Name.Accept(this)
        Write(" = ")
        item.Value.Accept(this)

    public fn Visit(item Interface)
        WriteIndented("Interface: ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        if item.Interfaces.Any()
            Write(" is ")
            JoinItems(item.Interfaces)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item LiteralToken) : Write(item.Value)

    public fn Visit(item LocalConstant)
        WriteIndented("Const: ")
        item.Name.Accept(this)
        Write(" = ")
        item.Value.Accept(this)
        WriteLine()

    public fn Visit(item LocalVariable)
        WriteIndented("Var: ")
        if item.Type == null
            Write("var")
        else
            item.Type.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        if item.Value != null
            Write(" = ")
            item.Value.Accept(this)
        WriteLine()

    public fn Visit(item MethodDefinition)
        WriteIndented("Method: ")
        if item.ReturnType == null
            Write("void")
        else
            item.ReturnType.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        Write("(")
        JoinItems(item.Parameters)
        WriteLine(")")
        WriteIndentedBlock(item.Statements)
    
    public fn Visit(item MethodSignature)
        WriteIndented("Method Sig: ")
        if item.ReturnType == null
            Write("void")
        else
            item.ReturnType.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        Write("(")
        JoinItems(item.Parameters)
        WriteLine(")")

    public fn Visit(item NamedExpression)
        item.Value.Accept(this)
        Write(" ")
        item.Name.Accept(this)

    public fn Visit(item NamespaceToken) : WriteLineIndented("Namespace: {str.Join(".", item.NameParts)}")

    public fn Visit(item Node) : throw new InvalidItemException()

    public fn Visit(item NullableType)
        Write("nullable(")
        item.Type.Accept(this)
        Write(")")
    
    public fn Visit(item NumberToken) : Write(item.Type ? {
        NumberType.Binary : "bin({item.Value})",
        NumberType.Decimal : item.Value,
        NumberType.Hexadecimal : "hex({item.Value})",
        _ : "[{item.Type}]({item.Value})",
    })

    public fn Visit(item Parameter)
        JoinItems(item.Modifiers, " ")
        Write(" ")
        item.Type?.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        if item.Value != null
            Write(" = ")
            item.Value.Accept(this)

    public fn Visit(item ParameterModifierToken) : Write(item.Value)

    public fn Visit(item PropertyDefinition)
        WriteIndented("Property: ")
        item.Type?.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        Write("{(item.GetSpecified ? " get" : "")}{(item.SetSpecified ? " set" : "")}")
        if item.Value != null
            Write(" = ")
            item.Value.Accept(this)
        WriteLine()
        if item.GetStatements.Any()
            Indent += 1
            WriteLineIndented("get")
            WriteIndentedBlock(item.GetStatements)
            Indent -= 1
        if item.SetStatements.Any()
            Indent += 1
            WriteIndented("set(")
            item.SetParameterName?.Accept(this)
            WriteLine(")")
            WriteIndentedBlock(item.SetStatements)
            Indent -= 1
    
    public fn Visit(item PropertySignature)
        WriteIndented("Property Sig: ")
        item.Type?.Accept(this)
        Write(" ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        WriteLine("{(item.GetSpecified ? " get" : "")}{(item.SetSpecified ? " set" : "")}")

    public fn Visit(item Return)
        WriteIndented("Return: ")
        if item.Value != null
            item.Value.Accept(this)
        WriteLine()

    public fn Visit(item SpaceToken) : WriteLineIndented("Space: {item.Size}")

    public fn Visit(item Statement) : throw new InvalidItemException()

    public fn Visit(item Core.SyntaxTree.String)
        Write("\"")
        var first = true
        for line in item.Lines
            if first
                first = false
            else
                WriteLine()
            for value in line
                if !(value is StringToken)
                    Write("{{")
                    value.Accept(this)
                    Write("}}")
                else
                    value.Accept(this)
        Write("\"")

    public fn Visit(item StringToken) : Write(item.Value)

    public fn Visit(item Struct)
        WriteIndented("Struct: ")
        item.Name.Accept(this)
        WriteGenerics(item.Generics)
        if item.Interfaces.Any()
            Write(" implements ")
            JoinItems(item.Interfaces)
        WriteLine()
        WriteIndentedBlock(item.Statements)

    public fn Visit(item Switch)
        WriteIndented("Switch: ")
        if item.LocalName != null and item.LocalValue != null
            item.LocalName.Accept(this)
            Write(" = ")
            item.LocalValue.Accept(this)
            Write(", ")
        item.Value.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Cases)

    public fn Visit(item Throw)
        Write("throw(")
        item.Value.Accept(this)
        Write(")")

    public fn Visit(item Try)
        WriteLineIndented("Try:")
        WriteIndentedBlock(item.Statements)
        for cat in item.Catches
            cat.Accept(this)
        if item.FinallyStatements.Any()
            WriteLineIndented("Finally:")
            WriteIndentedBlock(item.FinallyStatements)

    public fn Visit(item UnaryOperator)
        item.Operator.Accept(this)
        Write("(")
        item.Value.Accept(this)
        Write(")")

    public fn Visit(item UnaryOperatorToken) : Write(item.Value)

    public fn Visit(item Using)
        WriteIndented("Using: ")
        item.Name.Accept(this)
        Write(" = ")
        item.Value.Accept(this)
        WriteLine()
        WriteIndentedBlock(item.Statements)
