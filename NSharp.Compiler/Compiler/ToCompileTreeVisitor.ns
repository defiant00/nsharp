use NSharp.Compiler.Metadata
use NSharp.Compiler.Tree
use NSharp.Core.SyntaxTree

ns NSharp.Compiler

public class ToCompileTreeVisitor has ISyntaxTreeVisitor
    public fn new(state State)

    public fn Visit(item AnonymousFunction) : throw new NotImplementedException()
    public fn Visit(item Argument) : throw new NotImplementedException()
    public fn Visit(item ArgumentModifierToken) : throw new NotImplementedException()
    public fn Visit(item Core.SyntaxTree.Arguments) : throw new NotImplementedException()
    public fn Visit(item ArrayLiteral) : throw new NotImplementedException()
    public fn Visit(item Assignment) : throw new NotImplementedException()
    public fn Visit(item AssignmentOperatorToken) : throw new NotImplementedException()
    public fn Visit(item Core.SyntaxTree.Attribute) : throw new NotImplementedException()
    public fn Visit(item AttributeBlock) : throw new NotImplementedException()
    public fn Visit(item BadExpressionToken) : throw new NotImplementedException()
    public fn Visit(item BadStatementToken) : throw new NotImplementedException()
    public fn Visit(item BaseClassToken) : throw new NotImplementedException()
    public fn Visit(item BinaryOperator) : throw new NotImplementedException()
    public fn Visit(item BinaryOperatorToken) : throw new NotImplementedException()
    public fn Visit(item Block) : throw new NotImplementedException()
    public fn Visit(item BreakToken) : throw new NotImplementedException()
    public fn Visit(item Case) : throw new NotImplementedException()
    public fn Visit(item Catch) : throw new NotImplementedException()
    public fn Visit(item CharacterToken) : throw new NotImplementedException()
    public fn Visit(item Core.SyntaxTree.Class) : throw new NotImplementedException()
    public fn Visit(item CommentToken) : throw new NotImplementedException()
    public fn Visit(item Condition) : throw new NotImplementedException()
    public fn Visit(item Conditional) : throw new NotImplementedException()
    public fn Visit(item Constant) : throw new NotImplementedException()
    public fn Visit(item ConstructorCall) : throw new NotImplementedException()
    public fn Visit(item ConstructorDefinition) : throw new NotImplementedException()
    public fn Visit(item ContinueToken) : throw new NotImplementedException()
    public fn Visit(item CurrentObjectInstanceToken) : throw new NotImplementedException()
    public fn Visit(item DefaultValueToken) : throw new NotImplementedException()
    public fn Visit(item Core.SyntaxTree.Delegate) : throw new NotImplementedException()
    public fn Visit(item DiscardToken) : throw new NotImplementedException()
    public fn Visit(item Enumeration) : throw new NotImplementedException()
    public fn Visit(item EnumerationItem) : throw new NotImplementedException()
    public fn Visit(item Expression) : throw new NotImplementedException()
    public fn Visit(item ExpressionStatement) : throw new NotImplementedException()
    public fn Visit(item Field) : throw new NotImplementedException()
    public fn Visit(item Core.SyntaxTree.File) : throw new NotImplementedException()
    public fn Visit(item For) : throw new NotImplementedException()
    public fn Visit(item ForEach) : throw new NotImplementedException()
    public fn Visit(item Generic) : throw new NotImplementedException()
    public fn Visit(item GenericConstraintToken) : throw new NotImplementedException()
    public fn Visit(item IdentifierToken) : throw new NotImplementedException()
    public fn Visit(item If) : throw new NotImplementedException()
    public fn Visit(item ImportToken) : throw new NotImplementedException()
    public fn Visit(item Initializer) : throw new NotImplementedException()
    public fn Visit(item Interface) : throw new NotImplementedException()
    public fn Visit(item LiteralToken) : throw new NotImplementedException()
    public fn Visit(item LocalConstant) : throw new NotImplementedException()
    public fn Visit(item LocalVariable) : throw new NotImplementedException()
    public fn Visit(item MethodDefinition) : throw new NotImplementedException()
    public fn Visit(item MethodSignature) : throw new NotImplementedException()
    public fn Visit(item NamedExpression) : throw new NotImplementedException()
    public fn Visit(item NamespaceToken) : throw new NotImplementedException()
    public fn Visit(item Node) : throw new NotImplementedException()
    public fn Visit(item NullableType) : throw new NotImplementedException()
    public fn Visit(item NumberToken) : throw new NotImplementedException()
    public fn Visit(item Parameter) : throw new NotImplementedException()
    public fn Visit(item ParameterModifierToken) : throw new NotImplementedException()
    public fn Visit(item PropertyDefinition) : throw new NotImplementedException()
    public fn Visit(item PropertySignature) : throw new NotImplementedException()
    public fn Visit(item Return) : throw new NotImplementedException()
    public fn Visit(item SpaceToken) : throw new NotImplementedException()
    public fn Visit(item Statement) : throw new NotImplementedException()
    public fn Visit(item Core.SyntaxTree.String) : throw new NotImplementedException()
    public fn Visit(item StringToken) : throw new NotImplementedException()
    public fn Visit(item Struct) : throw new NotImplementedException()
    public fn Visit(item Switch) : throw new NotImplementedException()
    public fn Visit(item Throw) : throw new NotImplementedException()
    public fn Visit(item Try) : throw new NotImplementedException()
    public fn Visit(item UnaryOperator) : throw new NotImplementedException()
    public fn Visit(item UnaryOperatorToken) : throw new NotImplementedException()
    public fn Visit(item Using) : throw new NotImplementedException()


    ; private fn State State
    ; private fn Namespace str = str.Empty
    ; private fn Imports List{str} = new()
    ; private fn CurrentClass Stack{Tree.Class} = new()

    ; public fn new(state State) is State = state

    ; public fn Visit(item Comment) is ; empty
    ; public fn Visit(item Space) is ; empty

    ; public fn Visit(item Core.Ast.Class)
    ;     var newClass = new Tree.Class(
    ;         Imports,
    ;         Namespace,
    ;         item,
    ;         State.TypeResolver
    ;     )

    ;     CurrentClass.Push(newClass)
    ;     for stmt in item.Statements
    ;         stmt.Accept(this)
    ;     CurrentClass.Pop()

    ;     if CurrentClass.Any()
    ;         CurrentClass.Peek().Classes.Add(newClass)
        
    ;     State.Classes.Add(newClass)

    ; public fn Visit(item Core.Ast.Constant) is CurrentClass.Peek().Constants.Add(item)

    ; public fn Visit(item ConstructorDefinition) is throw new NotImplementedException()

    ; public fn Visit(item DelegateDefinition) is throw new NotImplementedException()

    ; public fn Visit(item Enumeration) is throw new NotImplementedException()

    ; public fn Visit(item Field) is CurrentClass.Peek().Fields.Add(item)

    ; public fn Visit(item Core.Ast.File)
    ;     Imports = new List{str}()
    ;     for stmt in item.Statements
    ;         stmt.Accept(this)

    ; public fn Visit(item Import) is Imports.Add(str.Join(".", item.NameParts))

    ; public fn Visit(item Interface) is throw new NotImplementedException()

    ; public fn Visit(item MethodDefinition) is CurrentClass.Peek().Methods.Add(item)

    ; public fn Visit(item Namespace) is Namespace = str.Join(".", item.NameParts)

    ; public fn Visit(item Property) is CurrentClass.Peek().Properties.Add(item)

    ; public fn Visit(item Struct) is throw new NotImplementedException()


    ; public fn Visit(item Expression) is throw new InvalidItemException()
    ; public fn Visit(item Statement) is throw new InvalidItemException()
    ; public fn Visit(item AnonymousFunction) is throw new InvalidItemException()
    ; public fn Visit(item Argument) is throw new InvalidItemException()
    ; public fn Visit(item Core.Ast.Array) is throw new InvalidItemException()
    ; public fn Visit(item ArrayLiteral) is throw new InvalidItemException()
    ; public fn Visit(item Assignment) is throw new InvalidItemException()
    ; public fn Visit(item BinaryOperator) is throw new InvalidItemException()
    ; public fn Visit(item Block) is throw new InvalidItemException()
    ; public fn Visit(item Break) is throw new InvalidItemException()
    ; public fn Visit(item Case) is throw new InvalidItemException()
    ; public fn Visit(item Catch) is throw new InvalidItemException()
    ; public fn Visit(item Character) is throw new InvalidItemException()
    ; public fn Visit(item Condition) is throw new InvalidItemException()
    ; public fn Visit(item Conditional) is throw new InvalidItemException()
    ; public fn Visit(item ConstructorCall) is throw new InvalidItemException()
    ; public fn Visit(item Continue) is throw new InvalidItemException()
    ; public fn Visit(item CurrentObjectInstance) is throw new InvalidItemException()
    ; public fn Visit(item DefaultValue) is throw new InvalidItemException()
    ; public fn Visit(item Discard) is throw new InvalidItemException()
    ; public fn Visit(item EnumerationItem) is throw new InvalidItemException()
    ; public fn Visit(item ErrorExpression) is throw new InvalidItemException()
    ; public fn Visit(item ErrorStatement) is throw new InvalidItemException()
    ; public fn Visit(item ExpressionStatement) is throw new InvalidItemException()
    ; public fn Visit(item For) is throw new InvalidItemException()
    ; public fn Visit(item ForEach) is throw new InvalidItemException()
    ; public fn Visit(item Generic) is throw new InvalidItemException()
    ; public fn Visit(item Identifier) is throw new InvalidItemException()
    ; public fn Visit(item If) is throw new InvalidItemException()
    ; public fn Visit(item ImplicitConstructorCall) is throw new InvalidItemException()
    ; public fn Visit(item Indexer) is throw new InvalidItemException()
    ; public fn Visit(item LiteralToken) is throw new InvalidItemException()
    ; public fn Visit(item LocalConstant) is throw new InvalidItemException()
    ; public fn Visit(item LocalVariable) is throw new InvalidItemException()
    ; public fn Visit(item MethodCall) is throw new InvalidItemException()
    ; public fn Visit(item MethodSignature) is throw new InvalidItemException()
    ; public fn Visit(item Modifier) is throw new InvalidItemException()
    ; public fn Visit(item NamedExpression) is throw new InvalidItemException()
    ; public fn Visit(item Core.Ast.Nullable) is throw new InvalidItemException()
    ; public fn Visit(item Number) is throw new InvalidItemException()
    ; public fn Visit(item Parameter) is throw new InvalidItemException()
    ; public fn Visit(item PropertySignature) is throw new InvalidItemException()
    ; public fn Visit(item Return) is throw new InvalidItemException()
    ; public fn Visit(item Core.Ast.String) is throw new InvalidItemException()
    ; public fn Visit(item StringLiteral) is throw new InvalidItemException()
    ; public fn Visit(item Switch) is throw new InvalidItemException()
    ; public fn Visit(item Throw) is throw new InvalidItemException()
    ; public fn Visit(item Try) is throw new InvalidItemException()
    ; public fn Visit(item UnaryOperator) is throw new InvalidItemException()
    ; public fn Visit(item Using) is throw new InvalidItemException()
