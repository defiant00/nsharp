use System.Reflection
use System.Reflection.Metadata
use System.Reflection.Metadata.Ecma335
use NSharp.Compiler.Metadata
use NSharp.Compiler.Tree
use NSharp.Core

ns NSharp.Compiler

; Pass 1, creates:
;   * The module and assembly.
;   * Class headers.
public static class CompilePass1
    public static fn Run(state State)
        var guid = Guid.NewGuid()

        state.PeMetadataBuilder.AddModule(
            0,
            state.PeMetadataBuilder.GetOrAddString("{state.FileName}.dll"),
            state.PeMetadataBuilder.GetOrAddGuid(guid),
            default,
            default
        )

        var assemblyHandle = state.PeMetadataBuilder.AddAssembly(
            state.PeMetadataBuilder.GetOrAddString(state.FileName),
            new Version(1, 0, 0, 0),
            default,
            default,
            0,
            AssemblyHashAlgorithm.None
        )

        if path = Path.GetDirectoryName(typeof(System.Object).Module.FullyQualifiedName), path != null
            state.TypeResolver.AddAssemblyPath(path)
        state.TypeResolver.AddAssemblyRef("System.Runtime")
        state.TypeResolver.AddAssemblyRef("System.Console")

        ; TargetFrameworkAttribute
        var targetFrameworkTypeRef = state.TypeResolver.GetOrAddTypeRef("System.Runtime.Versioning.TargetFrameworkAttribute")

        var targetFrameworkCtorSig = new BlobBuilder()
        new BlobEncoder(targetFrameworkCtorSig)
            .MethodSignature(isInstanceMethod = true)
            .Parameters(1, fn(r) : r.Void(), fn(p) : p.AddParameter().Type().String())

        var targetFrameworkMemberRef = state.PeMetadataBuilder.AddMemberReference(
            targetFrameworkTypeRef,
            state.PeMetadataBuilder.GetOrAddString(".ctor"),
            state.PeMetadataBuilder.GetOrAddBlob(targetFrameworkCtorSig)
        )

        var targetFrameworkAttribute = new BlobBuilder()
        new BlobEncoder(targetFrameworkAttribute)
            .CustomAttributeSignature(
                fn(fa) : fa.AddArgument().Scalar().Constant(".NETCoreApp,Version=v6.0"),
                fn(na) : na.Count(1).AddArgument(
                    false,
                    fn(t) : t.ScalarType().String(),
                    fn(n) : n.Name("FrameworkDisplayName"),
                    fn(l) : l.Scalar().Constant("")
                )
            )
        
        state.PeMetadataBuilder.AddCustomAttribute(
            assemblyHandle,
            targetFrameworkMemberRef,
            state.PeMetadataBuilder.GetOrAddBlob(targetFrameworkAttribute)
        )

        ; <Module>
        state.PeMetadataBuilder.AddTypeDefinition(
            default,
            default,
            state.PeMetadataBuilder.GetOrAddString("<Module>"),
            default,
            MetadataTokens.FieldDefinitionHandle(1),
            MetadataTokens.MethodDefinitionHandle(1)
        )

        for c in state.Classes
            ProcessClass(state, c)
    
    public static fn ProcessClass(state State, cl Class)
        if !cl.Type.Handle.IsNil
            return
        
        if cl.Emitting
            throw new Exception(Resources.FormatFatal(0x0000, "{cl.Namespace}.{cl.Name}"))
        
        cl.Emitting = true

        var baseName = cl.TreeItem.Base == null ? "System.Object" : cl.TreeItem.Base.ToTypeName()
        var baseType = state.TypeResolver.GetOrAddType(baseName, cl.Namespace, cl.Imports)
        
        var attrs = TypeAttributes.Class | TypeAttributes.AutoLayout | TypeAttributes.BeforeFieldInit
        ; if cl.TreeItem.Modifiers.Any(fn(m) is m.Type == ModifierType.Public)
        ;     attrs |= TypeAttributes.Public

        if baseType == null or baseType.IsReference
            cl.Type.Handle = state.PeMetadataBuilder.AddTypeDefinition(
                attrs,
                state.PeMetadataBuilder.GetOrAddString(cl.Namespace),
                state.PeMetadataBuilder.GetOrAddString(cl.Name),
                baseType?.TypeReferenceHandle ?? default,
                MetadataTokens.FieldDefinitionHandle(1),
                MetadataTokens.MethodDefinitionHandle(1)
            )
        else
            cl.Type.Handle = state.PeMetadataBuilder.AddTypeDefinition(
                attrs,
                state.PeMetadataBuilder.GetOrAddString(cl.Namespace),
                state.PeMetadataBuilder.GetOrAddString(cl.Name),
                baseType.TypeDefinitionHandle,
                MetadataTokens.FieldDefinitionHandle(1),
                MetadataTokens.MethodDefinitionHandle(1)
            )

        cl.Emitting = false
        state.ClassOrder.Add(cl)
        
        for c in cl.Classes
            ProcessClass(state, c)
