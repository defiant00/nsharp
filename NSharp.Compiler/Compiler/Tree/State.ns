use System.Reflection.Metadata
use System.Reflection.Metadata.Ecma335
use NSharp.Compiler.Metadata
use NSharp.Core

ns NSharp.Compiler.Tree

public class State has IDisposable
    public fn TypeResolver TypeResolver
    public fn Classes Dictionary{str, Class} = new()
    public fn ClassOrder List{Class} = new()
    ; enums
    ; interfaces
    ; structs
    ; delegates
    public fn Diagnostics List{Diagnostic} = new()

    public fn OutFilePath str
    public fn FileName str
    public fn IlBuilder BlobBuilder = new()
    public fn PeMetadataBuilder MetadataBuilder = new()
    public fn EntryPoint ?MethodDefinitionHandle
    public fn ObjectTypeRef TypeReferenceHandle = default

    public fn new(outFilePath str)
        TypeResolver = new(this)
        OutFilePath = outFilePath
        FileName = Path.GetFileName(outFilePath)
    
    public fn Dispose() is TypeResolver.Dispose()

    public fn AddDiagnostic(severity Severity, index int, var args []str) is AddDiagnostic(severity, index, default, args)

    public fn AddDiagnostic(severity Severity, index int, position Position, var args []str)
        var key str
        if severity
            is Severity.Message
                key = Resources.GetMessageKey(index)
            is Severity.Warning
                key = Resources.GetWarningKey(index)
            is Severity.Error
                key = Resources.GetErrorKey(index)
            is Severity.Fatal
                key = Resources.GetFatalKey(index)
            is _
                key = severity.ToString()
        var msg = Resources.FormatString(key, args)
        Diagnostics.Add(new Diagnostic(severity, key, msg, position))
