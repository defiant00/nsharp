use System.Reflection.Metadata
use System.Reflection.Metadata.Ecma335
use System.Reflection.PortableExecutable
use NSharp.Compiler.Tree

ns NSharp.Compiler

public class SaveStep
    public fn Run(state State)
        ; temporary IDs
        var guid = Guid.NewGuid()
        ; todo - calculate a proper content id
        var contentId = new BlobContentId(guid, 0x1)

        var dllPath = Path.Combine(Directory.GetCurrentDirectory(), "{state.OutFilePath}.dll")
        var pdbPath = Path.Combine(Directory.GetCurrentDirectory(), "{state.OutFilePath}.pdb")
        var runtimeConfigPath = Path.Combine(Directory.GetCurrentDirectory(), "{state.OutFilePath}.runtimeconfig.json")

        ; Make sure the directory exists.
        if dir = new FileInfo(dllPath).DirectoryName, dir != null
            Directory.CreateDirectory(dir)

        ; dll

        ; Specify the PDB location
        var debugDirBuilder = new DebugDirectoryBuilder()

        debugDirBuilder.AddCodeViewEntry(pdbPath, contentId, 0x0100)

        ; debugDirBuilder.AddPdbChecksumEntry("SHA256", ImmutableArray.Create((byte)1))
        debugDirBuilder.AddReproducibleEntry()

        use peStream = new FileStream(dllPath, FileMode.Create, FileAccess.ReadWrite)
            var headerCharacteristics = Characteristics.ExecutableImage | Characteristics.LargeAddressAware
            if state.EntryPoint == null
                headerCharacteristics |= Characteristics.Dll
            
            var peHeaderBuilder = new PEHeaderBuilder(imageCharacteristics = headerCharacteristics)
            var peBuilder = new ManagedPEBuilder(
                peHeaderBuilder,
                new MetadataRootBuilder(state.PeMetadataBuilder),
                state.IlBuilder,
                debugDirectoryBuilder = debugDirBuilder,
                entryPoint = state.EntryPoint ?? default,
                deterministicIdProvider = fn(x) is contentId)
            var peBlob = new BlobBuilder()
            var blobContentId = peBuilder.Serialize(peBlob)
            peBlob.WriteContentTo(peStream)

        ; pdb

        ; runtimeconfig json
        File.WriteAllText(runtimeConfigPath,
            "{{" ..
            "  ""runtimeOptions"": {{" ..
            "    ""tfm"": ""net6.0""," ..
            "    ""framework"": {{" ..
            "      ""name"": ""Microsoft.NETCore.App""," ..
            "      ""version"": ""6.0.0""" ..
            "    }}" ..
            "  }}" ..
            "}}")
