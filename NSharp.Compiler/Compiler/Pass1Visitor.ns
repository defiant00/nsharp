use System.Reflection
use System.Reflection.Metadata.Ecma335
use NSharp.Compiler.Tree

ns NSharp.Compiler

; Pass 1, creates:
;   * The module and assembly.
;   * Class headers.
public class Pass1Visitor has ICompileTreeVisitor
    public fn Visit(item Class) is ; empty

    public fn Visit(item State)
        var guid = Guid.NewGuid()

        item.PeMetadataBuilder.AddModule(
            0,
            item.PeMetadataBuilder.GetOrAddString("{item.FileName}.dll"),
            item.PeMetadataBuilder.GetOrAddGuid(guid),
            default,
            default
        )

        var assemblyHandle = item.PeMetadataBuilder.AddAssembly(
            item.PeMetadataBuilder.GetOrAddString(item.FileName),
            new Version(1, 0, 0, 0),
            default,
            default,
            0,
            AssemblyHashAlgorithm.None
        )

        ; <Module>
        item.PeMetadataBuilder.AddTypeDefinition(
            default,
            default,
            item.PeMetadataBuilder.GetOrAddString("<Module>"),
            default,
            MetadataTokens.FieldDefinitionHandle(1),
            MetadataTokens.MethodDefinitionHandle(1)
        )


    public fn Visit(item TreeItem) is throw new InvalidItemException()
