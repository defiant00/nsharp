use System.Reflection
use System.Reflection.Metadata
use System.Reflection.PortableExecutable

ns NSharp.Compiler.Metadata

public class Assembly has IDisposable
    public fn Name str
    public fn PublicKey []byte is Meta.GetBlobBytes(Definition.PublicKey)
    public fn Handle ?AssemblyReferenceHandle
    public fn Meta MetadataReader
    public fn TypeResolver TypeResolver

    private fn Stream FileStream
    private fn Definition AssemblyDefinition

    public fn new(typeResolver TypeResolver, fileName str)
        TypeResolver = typeResolver

        Stream = new FileStream(fileName, FileMode.Open, FileAccess.Read)
        Meta = new PEReader(Stream).GetMetadataReader()
        Definition = Meta.GetAssemblyDefinition()
        Name = Meta.GetString(Definition.Name)

        for handle in Meta.TypeDefinitions
            var type = Meta.GetTypeDefinition(handle)
            var visibility = type.Attributes & TypeAttributes.VisibilityMask
            if type.IsNested
                if visibility == TypeAttributes.NestedPublic
                        or visibility == TypeAttributes.NestedFamily
                        or visibility == TypeAttributes.NestedFamORAssem
                    new NestedType(this, type)
            else if visibility == TypeAttributes.Public
                new Type(this, type)
        
        for handle in Meta.ExportedTypes
            var type = Meta.GetExportedType(handle)
            if type.IsForwarder
                new ExportedType(this, type)
    
    public fn Dispose() is Stream.Dispose()
