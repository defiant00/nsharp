use System.Reflection.Metadata
use NSharp.Compiler.Tree

ns NSharp.Compiler.Metadata

public enum TypeItemType
    Assembly
    Namespace
    Type

public class TypeItem is Dictionary{str, TypeItem}
    public fn Handle ?TypeReferenceHandle
    public fn Value str
    public fn Class ?Class

    private fn Type TypeItemType
    private fn Loaded bool = false

    public fn new(type TypeItemType, value str)
        Type = type
        Value = value

    public fn GetTypeItem(parts IEnumerable{str}, name str) ?TypeItem
        var curr = this

        ; parent parts
        for part in parts
            EnsureChildren()
            if !curr.ContainsKey(part)
                ret null
            curr = curr[part]
        
        ; type
        var res ?TypeItem
        curr.TryGetValue(name, out res)
        ret res
    
    private fn EnsureChildren()
        if Loaded
            ret
        
        ; todo - load children

        Loaded = true
    
    public fn AddType(parent str, name str)
        var par = CreateParentTree(parent)
        par[name] = new TypeItem(TypeItemType.Type, name)
    
    public fn AddType(cl Class)
        var par = CreateParentTree(cl.Namespace)
        par[cl.Name] = new TypeItem(TypeItemType.Type, cl.Name){Class = cl}
    
    private fn CreateParentTree(parent str) TypeItem
        var parts = parent.Split('.')
        var curr = this
        for part in parts
            var found ?TypeItem
            if curr.TryGetValue(part, out found)
                curr = found
            else
                var newItem = new TypeItem(TypeItemType.Namespace, part)
                curr[part] = newItem
                curr = newItem
        ret curr
