use System.Reflection.Metadata
use NSharp.Compiler.Tree
use NSharp.Core

ns NSharp.Compiler.Metadata

public class TypeResolver has IDisposable
    private fn AssemblyFileExtensions []str get = ["dll", "exe"]
    private fn State State
    private fn AssemblyPaths List{str} = new()
    private fn Assemblies Dictionary{str, Assembly} = new()
    private fn Types Dictionary{str, Type} = new()

    public fn new(state State) : State = state

    public fn Dispose()
        for asm in Assemblies.Values
            asm.Dispose()
    
    public fn AddType(name str, type Type)
        if Types.ContainsKey(name)
            throw new Exception(Resources.FormatFatal(0x0002, name))
        Types[name] = type
    
    public fn AddAssemblyPath(path str) : AssemblyPaths.Add(path)

    public fn AddAssemblyRef(name str)
        for path in AssemblyPaths
            for extension in AssemblyFileExtensions
                var fullPath = Path.Combine(path, "{name}.{extension}")
                if File.Exists(fullPath)
                    AddAssemblyFileRef(fullPath)
                    return

    public fn AddAssemblyFileRef(fileName str)
        ; load the assembly
        var asm = new Assembly(this, fileName)
        if Assemblies.ContainsKey(asm.Name)
            State.AddDiagnostic(Severity.Warning, 0x0000, asm.Name)
        
        Assemblies[asm.Name] = asm
    
    public fn GetOrAddTypeRef(name str) TypeReferenceHandle : GetOrAddType(name)?.TypeReferenceHandle ?? default

    public fn GetOrAddType(name str, nspace ?str = null, imports ?IEnumerable{str} = null) ?Type
        var type ?Type
        ; check name directly
        if !Types.TryGetValue(name, out type)
            var matches = new List{str}()
            ; check with namespace appended
            if !str.IsNullOrEmpty(nspace)
                var nsName = "{nspace}.{name}"
                var nsType ?Type
                if Types.TryGetValue(nsName, out nsType)
                    matches.Add(nsName)
                    type = nsType
            ; check with imports appended
            if imports != null
                for import in imports
                    var impName = "{import}.{name}"
                    var impType ?Type
                    if Types.TryGetValue(impName, out impType)
                        matches.Add(impName)
                        type = impType
            if matches.Count > 1
                State.AddDiagnostic(Severity.Error, 0x0001, name, str.Join(" and ", matches))
        
        if type == null
            State.AddDiagnostic(Severity.Error, 0x0000, name)
            return null
        
        if type.IsReference
            var refType = type as ReferenceTypeBase
            ; create the assembly reference if necessary
            if refType.Assembly.Handle.IsNil
                refType.Assembly.Handle = State.PeMetadataBuilder.AddAssemblyReference(
                    State.PeMetadataBuilder.GetOrAddString(refType.Assembly.Name),
                    refType.Assembly.Definition.Version,
                    default,
                    State.PeMetadataBuilder.GetOrAddBlob(refType.Assembly.PublicKey),
                    default,
                    default
                )
            
            ; create the type reference if necessary
            if refType.Handle.IsNil
                refType.Handle = State.PeMetadataBuilder.AddTypeReference(
                    refType.Assembly.Handle,
                    State.PeMetadataBuilder.GetOrAddString(refType.Namespace),
                    State.PeMetadataBuilder.GetOrAddString(refType.Name)
                )
        else if type.Handle.IsNil
            CompilePass1.ProcessClass(State, (type as BuildType).Class)
        
        return type
