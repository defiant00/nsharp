use System.Reflection.Metadata
use NSharp.Compiler.Tree
use NSharp.Core

ns NSharp.Compiler.Metadata

public class TypeResolver has IDisposable
    private fn AssemblyFileExtensions []str get = ["dll", "exe"]
    private fn State State
    private fn AssemblyPaths List{str} = new()
    private fn Assemblies Dictionary{str, Assembly} = new()
    private fn Types Dictionary{str, Type} = new()

    public fn new(state State) is State = state

    public fn Dispose()
        for asm in Assemblies.Values
            asm.Dispose()
    
    public fn AddType(name str, type Type)
        if Types.ContainsKey(name)
            throw new Exception(Resources.FormatFatal(0x0002, name))
        Types[name] = type
    
    public fn AddAssemblyPath(path str) is AssemblyPaths.Add(path)

    public fn AddAssemblyRef(name str)
        for path in AssemblyPaths
            for extension in AssemblyFileExtensions
                var fullPath = Path.Combine(path, "{name}.{extension}")
                if File.Exists(fullPath)
                    AddAssemblyFileRef(fullPath)
                    ret

    public fn AddAssemblyFileRef(fileName str)
        ; load the assembly
        var asm = new Assembly(this, fileName)
        if Assemblies.ContainsKey(asm.Name)
            State.AddDiagnostic(Severity.Warning, 0x0000, asm.Name)
        
        Assemblies[asm.Name] = asm
    
    public fn GetOrAddTypeRef(name str) TypeReferenceHandle is GetOrAddType(name)?.TypeReferenceHandle ?? default

    public fn GetOrAddType(name str) ?Type
        var type ?Type
        if !Types.TryGetValue(name, out type)
            State.AddDiagnostic(Severity.Error, 0x0000, name)
            ret null
        
        if type.IsReference
            var refType = type as ReferenceTypeBase
            ; create the assembly reference if necessary
            if refType.Assembly.Handle == null
                refType.Assembly.Handle = State.PeMetadataBuilder.AddAssemblyReference(
                    State.PeMetadataBuilder.GetOrAddString(refType.Assembly.Name),
                    refType.Assembly.Definition.Version,
                    default,
                    State.PeMetadataBuilder.GetOrAddBlob(refType.Assembly.PublicKey),
                    default,
                    default
                )
            
            ; create the type reference if necessary
            if refType.TypeReferenceHandle == null
                refType.TypeReferenceHandle = State.PeMetadataBuilder.AddTypeReference(
                    refType.Assembly.Handle.Value,
                    State.PeMetadataBuilder.GetOrAddString(refType.Namespace),
                    State.PeMetadataBuilder.GetOrAddString(refType.Name)
                )
        
        ret type
