use System.Diagnostics
use NSharp.Core
use NSharp.Language.Min

ns NSharp.Compiler

public static class Program
    private val SAVE_EXT str = ".ns"
    private val EDIT_EXT str = ".edit"
    private val SAVE_SETTINGS str = ".nssave"
    private val EDIT_SETTINGS str = ".nsedit"
    private val LANGUAGE_KEY str = "language"

    public static fn Main(args []str)
        Console.WriteLine(Resources.GetString("Compiler.Intro"))

        var stopwatch = new Stopwatch()
        stopwatch.Start()

        var arguments = new Arguments(args)

        try
            if str.IsNullOrEmpty(arguments.Command) or arguments.Command == "help"
                Console.WriteLine()
                Console.WriteLine(Resources.GetString("Compiler.Usage"))
            else if arguments.Command == "build"
                Console.WriteLine("Build not yet supported.")
            else if arguments.Command == "compile"
                Compile(arguments)
            else if arguments.Command == "edit"
                Edit(arguments)
            else if arguments.Command == "format"
                Format(arguments)
            else if arguments.Command == "save"
                Save(arguments)
            else if arguments.Command == "validate"
                Validate(arguments)
            else
                Console.WriteLine(Resources.GetString("Compiler.NoCommandFound"))
        catch Exception ex
            SetConsoleColor(Severity.Fatal)
            Console.WriteLine(ex)

        Console.ResetColor()
        Console.WriteLine(Resources.FormatString("Compiler.Elapsed", stopwatch.Elapsed))
    
    private static fn Compile(args Arguments)
        if args.Flags.ContainsKey("tocs")
            ; Transpile to C#
            for path in args.Paths
                for file in Directory.EnumerateFiles(path, "*{SAVE_EXT}", SearchOption.AllDirectories)
                    if !File.Exists(file)
                        throw new Exception(Resources.FormatString("Compiler.FileDoesNotExist", file))
                    if !file.EndsWith(SAVE_EXT, StringComparison.OrdinalIgnoreCase)
                        throw new Exception(Resources.FormatString("Compiler.FileDoesNotEndWithExtension", file, SAVE_EXT))

                    var loadLang = GetLanguage(args, SAVE_SETTINGS, file)

                    var loadResult = loadLang.Load(file)
                    HandleResult(loadResult)
                    if loadResult.SyntaxTree != null
                        loadResult.SyntaxTree.Accept(new NSharp.Core.SyntaxTree.SetParentVisitor())
                        use visitor = new ToCsVisitor("{file}.cs")
                        loadResult.SyntaxTree.Accept(visitor)

        else
            var outFile = args.Flags.ContainsKey("out") ? args.Flags["out"] :
                throw new Exception(Resources.GetString("Compiler.OutMustBeSpecified"))
            
            var files = new List{str}()
            for path in args.Paths
                if Directory.Exists(path)
                    files.AddRange(Directory.EnumerateFiles(path, "*{SAVE_EXT}", SearchOption.AllDirectories))
                else if File.Exists(path)
                    files.Add(path)

            use compiler = new Compiler(outFile)
            for file in files
                var language ILanguage

                if file.EndsWith(SAVE_EXT, StringComparison.OrdinalIgnoreCase)
                    language = GetLanguage(args, SAVE_SETTINGS, file)
                else if file.EndsWith("{SAVE_EXT}{EDIT_EXT}", StringComparison.OrdinalIgnoreCase)
                    language = GetLanguage(args, EDIT_SETTINGS, file)
                else
                    throw new Exception(Resources.FormatString("Compiler.FileDoesNotEndWithExtension", file, "{SAVE_EXT} or {SAVE_EXT}{EDIT_EXT}"))

                var loadResult LoadResult = language.Load(file)
                HandleResult(loadResult)
                if loadResult.SyntaxTree != null
                    compiler.Add(loadResult.SyntaxTree)

            HandleCompileResult(compiler.Compile())
            compiler.Save()

    private static fn Edit(args Arguments)
        for file in args.Paths
            if !File.Exists(file)
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotExist", file))
            if !file.EndsWith(SAVE_EXT, StringComparison.OrdinalIgnoreCase)
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotEndWithExtension", file, SAVE_EXT))

            var loadLang = GetLanguage(args, SAVE_SETTINGS, file)
            var saveLang = GetLanguage(args, EDIT_SETTINGS, file)

            var loadResult = loadLang.Load(file)
            HandleResult(loadResult)
            if loadResult.SyntaxTree != null
                HandleResult(saveLang.Save("{file}{EDIT_EXT}", loadResult.SyntaxTree))

    private static fn Format(args Arguments)
        for file in args.Paths
            if !File.Exists(file)
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotExist", file))

            var language ILanguage

            if file.EndsWith(SAVE_EXT, StringComparison.OrdinalIgnoreCase)
                language = GetLanguage(args, SAVE_SETTINGS, file)
            else if file.EndsWith("{SAVE_EXT}{EDIT_EXT}", StringComparison.OrdinalIgnoreCase)
                language = GetLanguage(args, EDIT_SETTINGS, file)
            else
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotEndWithExtension", file, "{SAVE_EXT} or {SAVE_EXT}{EDIT_EXT}"))

            var loadResult = language.Load(file)
            HandleResult(loadResult)
            if loadResult.SyntaxTree != null
                HandleResult(language.Save(file, loadResult.SyntaxTree))

    private static fn Save(args Arguments)
        for file in args.Paths
            if !File.Exists(file)
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotExist", file))
            if !file.EndsWith("{SAVE_EXT}{EDIT_EXT}", StringComparison.OrdinalIgnoreCase)
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotEndWithExtension", file, "{SAVE_EXT}{EDIT_EXT}"))

            var loadLang = GetLanguage(args, EDIT_SETTINGS, file)
            var saveLang = GetLanguage(args, SAVE_SETTINGS, file)

            var loadResult = loadLang.Load(file)
            HandleResult(loadResult)
            if loadResult.SyntaxTree != null
                HandleResult(saveLang.Save(file.Substring(0, file.Length - EDIT_EXT.Length), loadResult.SyntaxTree))

    private static fn Validate(args Arguments)
        for file in args.Paths
            if !File.Exists(file)
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotExist", file))

            var language ILanguage

            if file.EndsWith(SAVE_EXT, StringComparison.OrdinalIgnoreCase)
                language = GetLanguage(args, SAVE_SETTINGS, file)
            else if file.EndsWith("{SAVE_EXT}{EDIT_EXT}", StringComparison.OrdinalIgnoreCase)
                language = GetLanguage(args, EDIT_SETTINGS, file)
            else
                throw new Exception(Resources.FormatString("Compiler.FileDoesNotEndWithExtension", file, "{SAVE_EXT} or {SAVE_EXT}{EDIT_EXT}"))

            var loadResult = language.Load(file)
            HandleResult(loadResult)

    private static fn HandleResult(result Result)
        if result.Diagnostics.Any()
            Console.ResetColor()
            Console.WriteLine(result.FileName)
            for diagnostic in result.Diagnostics
                SetConsoleColor(diagnostic.Severity)
                Console.WriteLine("  {diagnostic.Code} {diagnostic.Message} {diagnostic.Position}")

    private static fn SetConsoleColor(severity Severity)
        Console.ForegroundColor = severity ? {
            Severity.Message is ConsoleColor.Cyan,
            Severity.Warning is ConsoleColor.Yellow,
            Severity.Error is ConsoleColor.Red,
            Severity.Fatal is ConsoleColor.Red,
            _ is ConsoleColor.White,
        }

    private static fn HandleCompileResult(diagnostics List{Diagnostic})
        for diagnostic in diagnostics
            SetConsoleColor(diagnostic.Severity)
            Console.WriteLine("{diagnostic.Code} {diagnostic.Message} {diagnostic.Position}")
        if diagnostics.All(fn(d) is d.Severity < Severity.Error)
            Console.ResetColor()
            Console.WriteLine(Resources.GetString("Compiler.Success"))

    private static fn GetLanguage(args Arguments, configFileName str, startingPath str) ILanguage
        var config ?Dictionary{str, str} = null

        var dirName ?str = Path.GetDirectoryName(startingPath)
        if dirName != null
            var dir ?DirectoryInfo = new(dirName)
            for config == null and dir != null
                var configPath str = Path.Combine(dir.FullName, configFileName)
                if File.Exists(configPath)
                    config = Configuration.Load(configPath)
                dir = dir.Parent

        if config == null
            SetConsoleColor(Severity.Warning)
            Console.WriteLine(Resources.FormatString("Compiler.ConfigNotFound", configFileName))
            config = new()

        var lang ?ILanguage = null
        if config.ContainsKey(LANGUAGE_KEY)
            if config[LANGUAGE_KEY]
                is "Min"
                    lang = new Min(args.Flags, config)
        
        if lang == null
            lang = new Min(args.Flags, config)

        ret lang
